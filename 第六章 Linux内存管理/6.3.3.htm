<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="6.3.3.files/filelist.xml">
<link rel=Edit-Time-Data href="6.3.3.files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title> Slab分配机制</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="chsdate" downloadurl=""/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="chmetcnv" downloadurl=""/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>CLJ</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>CLJ</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2007-08-15T07:54:00Z</o:Created>
  <o:LastSaved>2007-08-15T07:54:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>2125</o:Words>
  <o:Characters>12119</o:Characters>
  <o:Lines>100</o:Lines>
  <o:Paragraphs>28</o:Paragraphs>
  <o:CharactersWithSpaces>14216</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:PunctuationKerning/>
  <w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:SimSun;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:宋体;
	mso-font-kerning:1.0pt;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
 /* Page Definitions */
 @page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:42.55pt;
	mso-footer-margin:49.6pt;
	mso-paper-source:0;
	layout-grid:15.6pt;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:381632600;
	mso-list-type:simple;
	mso-list-template-ids:1937021516;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:・;
	mso-level-tab-stop:21.25pt;
	mso-level-number-position:left;
	margin-left:21.25pt;
	text-indent:-21.25pt;
	font-family:宋体;
	mso-hansi-font-family:Wingdings;}
@list l1
	{mso-list-id:857282224;
	mso-list-type:simple;
	mso-list-template-ids:812002690;}
@list l1:level1
	{mso-level-text:（%1）;
	mso-level-tab-stop:40.2pt;
	mso-level-number-position:left;
	margin-left:40.2pt;
	text-indent:-28.8pt;}
@list l2
	{mso-list-id:1040478640;
	mso-list-type:simple;
	mso-list-template-ids:1937021516;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:・;
	mso-level-tab-stop:21.25pt;
	mso-level-number-position:left;
	margin-left:21.25pt;
	text-indent:-21.25pt;
	font-family:宋体;
	mso-hansi-font-family:Wingdings;}
@list l3
	{mso-list-id:1097017133;
	mso-list-type:simple;
	mso-list-template-ids:1937021516;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:・;
	mso-level-tab-stop:21.25pt;
	mso-level-number-position:left;
	margin-left:21.25pt;
	text-indent:-21.25pt;
	font-family:宋体;
	mso-hansi-font-family:Wingdings;}
@list l4
	{mso-list-id:1618365185;
	mso-list-type:simple;
	mso-list-template-ids:1937021516;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:・;
	mso-level-tab-stop:21.25pt;
	mso-level-number-position:left;
	margin-left:21.25pt;
	text-indent:-21.25pt;
	font-family:宋体;
	mso-hansi-font-family:Wingdings;}
@list l5
	{mso-list-id:1963537333;
	mso-list-type:simple;
	mso-list-template-ids:1937021516;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:・;
	mso-level-tab-stop:21.25pt;
	mso-level-number-position:left;
	margin-left:21.25pt;
	text-indent:-21.25pt;
	font-family:宋体;
	mso-hansi-font-family:Wingdings;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:普通表格;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=ZH-CN style='tab-interval:21.0pt;text-justify-trim:punctuation'>

<div class=Section1 style='layout-grid:15.6pt'>

<p class=MsoNormal style='mso-outline-level:1'><st1:chsdate Year="1899"
Month="12" Day="30" IsLunarDate="False" IsROCDate="False" w:st="on"><span
 lang=EN-US>6.3.3</span></st1:chsdate><span lang=EN-US> Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>分配机制</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span><span class=GramE><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>采用伙伴</span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>算法分配内存时，每次至少分配一个页面。但当请求分配的内存大小为几十个字节或几百个字节时应该如何处理？如何在一个页面中分配小的内存区，小内存区的分配所产生的内碎片又如何解决？</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>Linux2.0</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>采用的解决办法是建立了</span><span lang=EN-US>13</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>个空闲区链表，它们的大小从</span><span lang=EN-US>32</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>字节到</span><span lang=EN-US>132056</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>字节。从</span><span lang=EN-US>Linux2.2</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>开始，</span><span lang=EN-US>MM</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>的开发者采用了一种叫做</span><span
lang=EN-US>slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的分配模式，该模式早在</span><span lang=EN-US>1994</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>年就被开发出来，用于</span><span lang=EN-US>Sun Microsystem Solaris
2.4</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>操作系统中。</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的提出主要是基于以下考虑：</span></p>

<p class=MsoNormal style='margin-left:32.65pt;text-indent:-21.25pt;mso-list:
l3 level1 lfo1;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>内核对内存区的分配取决于所存放数据的类型。例如，当给用户<span
class=GramE>态进程</span>分配页面时，内核调用</span><span lang=EN-US>get_free_page()</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>函数，并用</span><span lang=EN-US>0</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>填充这个页面。</span>
<span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>而给内核的数据结构分配页面时，事情没有这么简单，例如，要对数据结构所在的内存进行初始化、在不用时要收回它们所占用的内存。因此，</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>中引入了对象这个概念，所谓对象就是存放一组数据结构的内存区，其方法就是构造<span
class=GramE>或析构</span>函数，构造函数用于初始化数据结构所在的内存区，<span class=GramE>而析构函数</span>收回相应的内存区。但为了便于理解，你也可以把对象直接看作内核的数据结构。为了避免重复初始化对象，</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>分配模式并不丢弃已分配的对象，而是释放但把它们依然保留在内存中。当以后又要请求分配同一对象时，就可以从内存获取而不用进行初始化，这是在</span><span
lang=EN-US>Solaris </span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中引入</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的基本思想。</span></p>

<p class=MsoNormal style='margin-left:32.65pt;text-indent:24.0pt'><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>实际上，</span><span lang=EN-US>Linux</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中对</span><span lang=EN-US>Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>分配模式有所改进，它对内存区的处理并不需要进行初始化或回收。出于效率的考虑，</span><span
lang=EN-US>Linux</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>并不调用对象的构造<span class=GramE>或析构</span>函数，而是把指向这两个函数的指针都置为空。</span><span
lang=EN-US>Linux</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>中引入</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的主要目的是为了减少对伙伴算法的调用次数。</span></p>

<p class=MsoNormal style='margin-left:38.65pt;text-indent:-21.25pt;mso-list:
l0 level1 lfo2;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>实际上，内核经常反复使用某一内存区。例如，只要内核创建一个新的进程，就要为该进程相关的数据结构（</span><span
lang=EN-US>task_struct</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>、打开文件对象等）分配内存区。当进程结束时，收回这些内存区。因为进程的创建和撤销非常频繁，因此，</span><span
lang=EN-US>Linux</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的早期版本把大量的时间花费在反复分配或回收这些内存区上。从</span><span
lang=EN-US>Linux2.2</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>开始，把那些频繁使用的页面保存在高速缓存中并重新使用。</span></p>

<p class=MsoNormal style='margin-left:38.65pt;text-indent:-21.25pt;mso-list:
l0 level1 lfo2;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>可以根据对内存区的使用频率来对它分类。对于预期频繁使用的内存区，可以创建一组特定大小的专用缓冲区进行处理，以避免内碎片的产生。对于较少使用的内存区，可以创建一组通用缓冲区（如</span><span
lang=EN-US>Linux2.0</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中所使用的</span><span
lang=EN-US>2</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的<span class=GramE>幂</span>次方）来处理，即使这种处理模式产生碎片，也对整个系统的性能影响不大。</span></p>

<p class=MsoNormal style='margin-left:38.65pt;text-indent:-21.25pt;mso-list:
l0 level1 lfo2;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>硬件高速缓存的使用，又为尽量减少对伙伴算法的调用提供了另一个理由，因为对伙伴算法的每次调用都会“弄脏”硬件高速缓存，因此，这就增加了对内存的平均访问次数。</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>分配模式把对象分组放进缓冲区（尽管英文中使用了</span><span lang=EN-US>Cache</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>这个词，但实际上指的是内存中的区域，而不是指硬件高速缓存）。因为缓冲区的组织和管理与硬件高速缓存的命中率密切相关，因此，</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>缓冲区并非由各个对象直接构成，而是由一连串的“大块（</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>）”构成，而每个大块中则包含了若干个同种类型的对象，这些对象或已被分配，或空闲，如图</span><span
lang=EN-US>6.12</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>所示。一般而言，对象分两种，一种是大对象，一种是小对象。所谓小对象，是指在一个页面中可以容纳下好几个对象的那种。例如，一个</span><span
lang=EN-US>inode</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>结构大约占</span><span lang=EN-US>300</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>多个字节，因此，一个页面中可以容纳</span><span lang=EN-US>8</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>个以上的</span><span lang=EN-US>inode</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构，因此，</span><span lang=EN-US>inode</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构就为小对象。</span><span lang=EN-US>Linux</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>内核中把小于</span><span lang=EN-US>512</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>字节的对象叫做小对象。</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:83.45pt;text-indent:22.8pt'><!--[if gte vml 1]><o:wrapblock><v:group
  id="_x0000_s1026" style='position:absolute;left:0;text-align:left;
  margin-left:68.7pt;margin-top:0;width:343.5pt;height:149.4pt;z-index:1'
  coordorigin="2058,8578" coordsize="6870,2988" o:allowincell="f">
  <v:group id="_x0000_s1027" style='position:absolute;left:2058;top:8578;
   width:6870;height:2988' coordorigin="2058,7416" coordsize="6870,2988">
   <v:group id="_x0000_s1028" style='position:absolute;left:2058;top:8578;
    width:1603;height:830' coordorigin="2058,10902" coordsize="1603,830">
    <v:shapetype id="_x0000_t176" coordsize="21600,21600" o:spt="176" adj="2700"
     path="m@0,qx0@0l0@2qy@0,21600l@1,21600qx21600@2l21600@0qy@1,xe">
     <v:stroke joinstyle="miter"/>
     <v:formulas>
      <v:f eqn="val #0"/>
      <v:f eqn="sum width 0 #0"/>
      <v:f eqn="sum height 0 #0"/>
      <v:f eqn="prod @0 2929 10000"/>
      <v:f eqn="sum width 0 @3"/>
      <v:f eqn="sum height 0 @3"/>
      <v:f eqn="val width"/>
      <v:f eqn="val height"/>
      <v:f eqn="prod width 1 2"/>
      <v:f eqn="prod height 1 2"/>
     </v:formulas>
     <v:path gradientshapeok="t" limo="10800,10800" o:connecttype="custom"
      o:connectlocs="@8,0;0,@9;@8,@7;@6,@9" textboxrect="@3,@3,@4,@5"/>
    </v:shapetype><v:shape id="_x0000_s1029" type="#_x0000_t176" style='position:absolute;
     left:2287;top:10902;width:1374;height:664'/>
    <v:shape id="_x0000_s1030" type="#_x0000_t176" style='position:absolute;
     left:2058;top:11068;width:1374;height:664'>
     <v:textbox style='mso-next-textbox:#_x0000_s1030'>
      <![if !mso]>
      <table cellpadding=0 cellspacing=0 width="100%">
       <tr>
        <td><![endif]>
        <div>
        <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
        "Times New Roman";mso-hansi-font-family:"Times New Roman"'>缓冲区</span></p>
        </div>
        <![if !mso]></td>
       </tr>
      </table>
      <![endif]></v:textbox>
    </v:shape></v:group><v:group id="_x0000_s1031" style='position:absolute;
    left:4119;top:9408;width:1832;height:996' coordorigin="4348,10570"
    coordsize="1832,996">
    <v:rect id="_x0000_s1032" style='position:absolute;left:4755;top:10570;
     width:1425;height:664'/>
    <v:rect id="_x0000_s1033" style='position:absolute;left:4552;top:10736;
     width:1424;height:664'/>
    <v:rect id="_x0000_s1034" style='position:absolute;left:4348;top:10902;
     width:1425;height:664'>
     <v:textbox style='mso-next-textbox:#_x0000_s1034'>
      <![if !mso]>
      <table cellpadding=0 cellspacing=0 width="100%">
       <tr>
        <td><![endif]>
        <div>
        <p class=MsoNormal><span lang=EN-US><span
        style='mso-spacerun:yes'>&nbsp;&nbsp; </span><span class=GramE>slab</span></span></p>
        </div>
        <![if !mso]></td>
       </tr>
      </table>
      <![endif]></v:textbox>
    </v:rect></v:group><v:group id="_x0000_s1035" style='position:absolute;
    left:8012;top:7582;width:916;height:664' coordorigin="8012,7582"
    coordsize="916,664">
    <v:rect id="_x0000_s1036" style='position:absolute;left:8216;top:7582;
     width:712;height:498'/>
    <v:rect id="_x0000_s1037" style='position:absolute;left:8114;top:7665;
     width:712;height:498'/>
    <v:rect id="_x0000_s1038" style='position:absolute;left:8012;top:7748;
     width:712;height:498'>
     <v:textbox>
      <![if !mso]>
      <table cellpadding=0 cellspacing=0 width="100%">
       <tr>
        <td><![endif]>
        <div>
        <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
        </div>
        <![if !mso]></td>
       </tr>
      </table>
      <![endif]></v:textbox>
    </v:rect></v:group><v:rect id="_x0000_s1039" style='position:absolute;
    left:4984;top:7416;width:1425;height:664'/>
   <v:rect id="_x0000_s1040" style='position:absolute;left:4781;top:7582;
    width:1424;height:664'/>
   <v:rect id="_x0000_s1041" style='position:absolute;left:4577;top:7748;
    width:1425;height:664'>
    <v:textbox>
     <![if !mso]>
     <table cellpadding=0 cellspacing=0 width="100%">
      <tr>
       <td><![endif]>
       <div>
       <p class=MsoNormal><span lang=EN-US><span
       style='mso-spacerun:yes'>&nbsp; </span><span class=GramE>slab</span></span></p>
       </div>
       <![if !mso]></td>
      </tr>
     </table>
     <![endif]></v:textbox>
   </v:rect><v:group id="_x0000_s1042" style='position:absolute;left:6638;
    top:8744;width:916;height:664' coordorigin="8012,7582" coordsize="916,664">
    <v:rect id="_x0000_s1043" style='position:absolute;left:8216;top:7582;
     width:712;height:498'/>
    <v:rect id="_x0000_s1044" style='position:absolute;left:8114;top:7665;
     width:712;height:498'/>
    <v:rect id="_x0000_s1045" style='position:absolute;left:8012;top:7748;
     width:712;height:498'>
     <v:textbox style='mso-next-textbox:#_x0000_s1045'>
      <![if !mso]>
      <table cellpadding=0 cellspacing=0 width="100%">
       <tr>
        <td><![endif]>
        <div>
        <p class=MsoNormal><span lang=EN-US><span
        style='mso-spacerun:yes'>&nbsp;</span></span></p>
        </div>
        <![if !mso]></td>
       </tr>
      </table>
      <![endif]></v:textbox>
    </v:rect></v:group><v:group id="_x0000_s1046" style='position:absolute;
    left:7325;top:9740;width:916;height:664' coordorigin="8012,7582"
    coordsize="916,664">
    <v:rect id="_x0000_s1047" style='position:absolute;left:8216;top:7582;
     width:712;height:498'/>
    <v:rect id="_x0000_s1048" style='position:absolute;left:8114;top:7665;
     width:712;height:498'/>
    <v:rect id="_x0000_s1049" style='position:absolute;left:8012;top:7748;
     width:712;height:498'>
     <v:textbox>
      <![if !mso]>
      <table cellpadding=0 cellspacing=0 width="100%">
       <tr>
        <td><![endif]>
        <div>
        <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
        </div>
        <![if !mso]></td>
       </tr>
      </table>
      <![endif]></v:textbox>
    </v:rect></v:group><v:line id="_x0000_s1050" style='position:absolute'
    from="2974,8080" to="2974,8578"/>
   <v:line id="_x0000_s1051" style='position:absolute' from="2974,8080" to="4577,8080">
    <v:stroke endarrow="block"/>
   </v:line><v:line id="_x0000_s1052" style='position:absolute' from="3432,9076"
    to="3890,9076"/>
   <v:line id="_x0000_s1053" style='position:absolute' from="3890,9076" to="3890,9906"/>
   <v:line id="_x0000_s1054" style='position:absolute' from="3890,9906" to="4119,9906">
    <v:stroke endarrow="block"/>
   </v:line><v:line id="_x0000_s1055" style='position:absolute' from="5954,8080"
    to="8015,8080">
    <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
   </v:line><v:line id="_x0000_s1056" style='position:absolute;flip:y' from="5035,9076"
    to="5035,9574">
    <v:stroke dashstyle="1 1" endcap="round"/>
   </v:line><v:line id="_x0000_s1057" style='position:absolute' from="5035,9076"
    to="6638,9076">
    <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
   </v:line><v:line id="_x0000_s1058" style='position:absolute' from="5493,10072"
    to="7325,10072">
    <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
   </v:line></v:group><v:shapetype id="_x0000_t202" coordsize="21600,21600"
   o:spt="202" path="m,l,21600r21600,l21600,xe">
   <v:stroke joinstyle="miter"/>
   <v:path gradientshapeok="t" o:connecttype="rect"/>
  </v:shapetype><v:shape id="_x0000_s1059" type="#_x0000_t202" style='position:absolute;
   left:8012;top:9574;width:916;height:498' stroked="f">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>对象</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:shape><w:wrap type="topAndBottom"/>
 </v:group><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=91 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=463 height=203 src="6.3.3.files/image001.gif" v:shapes="_x0000_s1026 _x0000_s1027 _x0000_s1028 _x0000_s1029 _x0000_s1030 _x0000_s1031 _x0000_s1032 _x0000_s1033 _x0000_s1034 _x0000_s1035 _x0000_s1036 _x0000_s1037 _x0000_s1038 _x0000_s1039 _x0000_s1040 _x0000_s1041 _x0000_s1042 _x0000_s1043 _x0000_s1044 _x0000_s1045 _x0000_s1046 _x0000_s1047 _x0000_s1048 _x0000_s1049 _x0000_s1050 _x0000_s1051 _x0000_s1052 _x0000_s1053 _x0000_s1054 _x0000_s1055 _x0000_s1056 _x0000_s1057 _x0000_s1058 _x0000_s1059"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
</p>

<p class=MsoNormal style='margin-left:83.45pt;text-indent:22.8pt;mso-outline-level:
1'><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>图</span><span lang=EN-US>6.10 Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的组成</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>实际上，缓冲区就是主存中的一片区域，把这片区域划分为多个块，每块就是一个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>，每个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>由一个或多个页面组成，每个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中存放的就是对象。</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>因为</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>分配模式的实现比较复杂，我们不准备对其进行详细的分析，只对主要内容给予描述。</span></p>

<p class=MsoNormal style='mso-outline-level:1'><span lang=EN-US>1</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>．</span><span lang=EN-US> Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>的数据结构</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>分配模式有两个主要的数据结构，一个是描述缓冲区的结构</span><span lang=EN-US>kmem_cache_t</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，一个是描述</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的结构</span><span lang=EN-US>kmem_slab_t</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，下面对这两个结构给予简要讨论：</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>（</span><span
lang=EN-US>1</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>）</span><span lang=EN-US>Slab</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>是</span><span lang=EN-US>Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>管理模式中最基本的结构。它由一组连续的物理页面组成，对象就被顺序放在这些页面中。其数据结构在</span><span
lang=EN-US>mm/slab.c</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中定义如下：</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>/*</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>* slab_t</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>*</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>* Manages the objs in a slab. Placed
either at the beginning of mem allocated</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>* <span class=GramE>for</span> a slab,
or allocated from an general cache.</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>* Slabs are chained into three <span
class=GramE>list</span>: fully used, partial, fully free slabs.</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>*/</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span><span class=GramE>typedef</span>
struct slab_s {</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>struct</span> list_head<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>list;</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> long<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>colouroff;</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>void</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>*s_mem;<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* including colour offset */</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>inuse;<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* num of objs active in slab */</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>kmem_bufctl_t</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>free;</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>} slab_t;</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><!--[if gte vml 1]><o:wrapblock><v:group
  id="_x0000_s1060" style='position:absolute;left:0;text-align:left;
  margin-left:57.75pt;margin-top:0;width:263.35pt;height:182.75pt;z-index:2'
  coordorigin="2942,8042" coordsize="5267,3655" o:allowincell="f">
  <v:rect id="_x0000_s1061" style='position:absolute;left:4545;top:8042;
   width:2061;height:3486'>
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>着色补偿区</span></p>
      <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>对象区</span></p>
      <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
      <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
      <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>空闲对象链</span></p>
      <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>着色区</span></p>
      <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
      <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:rect><v:line id="_x0000_s1062" style='position:absolute' from="4545,8540"
   to="6606,8540"/>
  <v:line id="_x0000_s1063" style='position:absolute' from="4545,10532" to="6606,10532"/>
  <v:line id="_x0000_s1064" style='position:absolute' from="4545,11196" to="6606,11196"/>
  <v:line id="_x0000_s1065" style='position:absolute' from="6148,11362" to="7293,11362">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1066" style='position:absolute;flip:x' from="3858,11362"
   to="4774,11362">
   <v:stroke endarrow="block"/>
  </v:line><v:shape id="_x0000_s1067" type="#_x0000_t202" style='position:absolute;
   left:7293;top:11196;width:916;height:501' stroked="f">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span class=GramE><span lang=EN-US>next</span></span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:shape><v:shape id="_x0000_s1068" type="#_x0000_t202" style='position:absolute;
   left:2942;top:11196;width:916;height:501' stroked="f">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span class=GramE><span lang=EN-US>prev</span></span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:shape><w:wrap type="topAndBottom"/>
 </v:group><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0>
  <tr>
   <td width=77 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=355 height=249 src="6.3.3.files/image002.gif" v:shapes="_x0000_s1060 _x0000_s1061 _x0000_s1062 _x0000_s1063 _x0000_s1064 _x0000_s1065 _x0000_s1066 _x0000_s1067 _x0000_s1068"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>这里的链表用来将前一个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>和后一个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>链接起来形成一个双向链表，</span><span lang=EN-US>colouroff</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>为该</span><span lang=EN-US>Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>上着色区的大小，指针</span><span
lang=EN-US>s_mem</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>指向对象区的起点，</span><span lang=EN-US>inuse</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>是</span><span lang=EN-US>Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中所分配对象的个数。最后，</span><span
lang=EN-US>free</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的值指明了空闲对象链中的第一个对象，</span><span
lang=EN-US>kmem_bufctl_t</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>其实是一个整数。</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>结构的示意图如图</span><span lang=EN-US>6.11</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>所示：</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>图</span><span lang=EN-US>6.11 Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构示意图</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>对于小对象，</span>
<span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>就把</span><span lang=EN-US>Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>的描述结构</span><span
lang=EN-US>slab_t</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>放在该</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中；对于大对象，则把</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构游离出来，集中存放。关于</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中<span class=GramE>的着</span>色区再给予具体描述：</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l5 level1 lfo3;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>每个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的首部都有一个小小的区域是不用的，称为<span class=GramE>“着</span>色区（</span><span
lang=EN-US>coloring area</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>）</span><span
lang=EN-US>”</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>。着色区的大小使</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中的每个对象的起始地址都按高速缓存中的<span class=GramE>”</span>缓存行（</span><span
lang=EN-US>cache line</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>）</span><span
class=GramE><span lang=EN-US>”</span></span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>大小进行对齐（</span><span
lang=EN-US>80386</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的一级高速缓存<span class=GramE>行大小</span>为</span><span
lang=EN-US>16</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>字节，</span><span lang=EN-US>Pentium</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>为</span><span lang=EN-US>32</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>字节）。因为</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>是由</span><span lang=EN-US>1</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>个页面或多个页面（最多为</span><span lang=EN-US>32</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>）组成，因此，每个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>都是从一个页面边界开始的，它自然按高速缓存的缓冲行对齐。但是，</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中的对象大小不确定，设置着色区的目的就是将</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中第一个对象的起始地址往后推到与缓冲行对齐的位置。因为一个缓冲区中有多个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，因此，应该把每个缓冲区中的各个</span><span class=GramE><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>着</span></span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>色区的大小尽量安排成不同的大小，这样可以使得在不同的</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>中，处于同一相对位置的对象，让它们在高速缓存中的起始地址相互错开，这样就可以改善高速缓存的存取效率。</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l5 level1 lfo3;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>每个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>上最后一个对象以后也有个小小的废料区是不用的，这是对着色区大小的补偿，其大小<span
class=GramE>取决于着</span>色区的大小，以及</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>与其每个对象的相对大小。但该区域<span class=GramE>与着</span>色区的总和对于同一种对象的各个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>是个常数。</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l5 level1 lfo3;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>每个对象的大小基本上是所需数据结构的大小。只有当数据结构的大小不与高速缓存中的缓冲行对齐时，才增加若干字节使其对齐。所以，一个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>上的所有对象的起始地址都必然是按高速缓存中的缓冲行对齐的。</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US>(2)</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>缓冲区</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span></span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>每个缓冲区管理着一个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>链表，</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>按序分为三组。第一组是全满的</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（没有空闲的对象），第二组</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中只有部分对象被分配，部分对象还空闲，最后一组</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中的对象全部空闲。只所以这样分组，是为了对</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>进行有效的管理。每个缓冲区还有一个轮转锁（</span><span lang=EN-US>spinlock</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>），在对链表进行修改时用这个轮转<span class=GramE>锁进行</span>同步。类型</span><span
lang=EN-US>kmem_cache_s</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>在</span><span
lang=EN-US>mm/slab.c</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中定义如下：</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span><span class=GramE>struct</span>
kmem_cache_s {</span></p>

<p class=MsoNormal style='margin-left:22.8pt;mso-outline-level:1'><span
lang=EN-US>/* 1) each alloc &amp; free */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* full, partial first, then free */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>struct</span> list_head<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>slabs_full;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>struct</span> list_head<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>slabs_partial;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>struct</span> list_head<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>slabs_free;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=GramE>unsigned</span>
int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>objsize;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>flags;<span style='mso-spacerun:yes'>&nbsp; </span>/* constant flags */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>num;<span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>/* # of
objs per slab */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>spinlock_t</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>spinlock;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US>#ifdef
CONFIG_SMP</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;</span>batchcount;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US>#endif</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US>/* 2) slab
additions /removals */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* order of pgs per slab (2^n) */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>gfporder;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* force GFP flags, e.g. GFP_DMA */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>gfpflags;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>size_t</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>colour;<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* cache colouring range */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>colour_off;<span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* colour offset */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>colour_next;<span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>/*
cache colouring */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>kmem_cache_t<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>*slabp_cache;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>growing;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> int<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>dflags;<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* dynamic flags */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* constructor func */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>void</span> (*ctor)(void *, kmem_cache_t *, unsigned
long);</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/* de-constructor func */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>void</span> (*dtor)(void *, kmem_cache_t *, unsigned
long);</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> long<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>failures;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US>/* 3) cache
creation/removal */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>char</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>name[CACHE_NAMELEN];</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>struct</span> list_head<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>next;</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US>#ifdef
CONFIG_SMP</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US>/* 4) per-cpu
data */</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=PT-BR style='mso-ansi-language:PT-BR'>cpucache_t<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>*cpudata[NR_CPUS];<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt;mso-outline-level:1'><span
lang=PT-BR style='mso-ansi-language:PT-BR'>#endif<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=PT-BR
style='mso-ansi-language:PT-BR'>…..<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=PT-BR
style='mso-ansi-language:PT-BR'>};<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>然后定义了</span><span
lang=PT-BR style='mso-ansi-language:PT-BR'>kmem_cache_t</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman";mso-ansi-language:PT-BR'>，</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>并给部分域赋给了初值</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman";mso-ansi-language:PT-BR'>：</span><span lang=PT-BR
style='mso-ansi-language:PT-BR'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=PT-BR
style='mso-ansi-language:PT-BR'>static kmem_cache_t cache_cache = {<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=PT-BR
style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=EN-US>slabs_full:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span>LIST_HEAD_<span
class=GramE>INIT(</span>cache_cache.slabs_full),</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>slabs_partial:<span style='mso-spacerun:yes'>&nbsp; </span>LIST_HEAD_<span
class=GramE>INIT(</span>cache_cache.slabs_partial),</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span>slabs_free:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span>LIST_HEAD_<span
class=GramE>INIT(</span>cache_cache.slabs_free),</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span><span class=GramE>objsize</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>sizeof(kmem_cache_t),</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span><span class=GramE>flags</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SLAB_NO_REAP,</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span><span class=GramE>spinlock</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SPIN_LOCK_UNLOCKED,</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span>colour_off:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span>L1_CACHE_BYTES,</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span><span class=GramE>name</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>&quot;kmem_cache&quot;,</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='margin-left:22.8pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>对该结构说明如下：</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l4 level1 lfo4;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>该结构中有三个队列</span><span
lang=EN-US>slabs_full</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>、</span><span
lang=EN-US>slabs_partial</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>以及</span><span
lang=EN-US>slabs_free</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>，分别指向满</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>、半满</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>和空闲</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，另一个队列</span><span lang=EN-US>next</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>则把所有的专用缓冲区链成一个链表。</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l4 level1 lfo4;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>除了这些队列和指针，该结构中还有一些重要的域：</span><span
lang=EN-US>objsize</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>是原始的数据结构的大小，这里初始化为</span><span
lang=EN-US>kmem_cache_t</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>的大小；</span><span
lang=EN-US>num</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>表示每个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>上有几个缓冲区；</span><span lang=EN-US>gfporder</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>则表示每个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>大小的对数，即每个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>由</span><span lang=EN-US>2 <sup>gfporder</sup></span><span
class=GramE><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>个</span></span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>页面构成。</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l4 level1 lfo4;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>如前所述<span
class=GramE>，着</span>色区的使用是为了使同一缓冲区中不同</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>上的对象区的起始地址相互错开，这样有了利于改善高速缓存的效率。</span><span lang=EN-US>colour_off</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>表示颜色的偏移量，</span><span lang=EN-US>colour</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>表示颜色的数量；一个缓冲区中颜色的数量取决于</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中对象的个数、剩余空间以及高速缓存行的大小。所以，对每个缓冲区都要计算它的颜色数量，这个数量就保存在</span><span
lang=EN-US>colour</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>中，而下一个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>将要使用的颜色则保存在</span><span lang=EN-US>colour_next</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中。当</span><span lang=EN-US>colour_next</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>达到最大值时，就又从</span><span lang=EN-US>0</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>开始。着色区的大小可以根据（</span><span lang=EN-US>colour_off</span><span
lang=EN-US style='font-family:Symbol;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>&acute;</span></span><span
lang=EN-US>colour</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>）算得。例如，如果</span><span lang=EN-US>colour
</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>为</span><span lang=EN-US>5</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，</span><span lang=EN-US>colour_off</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>为</span><span lang=EN-US>8</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>，则第一个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的颜色将为</span><span lang=EN-US>0</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，</span><span lang=EN-US>Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中第一个对象区的起始地址（相对）为</span><span
lang=EN-US>0</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>，下一个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中第一个对象区的起始地址为</span><span lang=EN-US>8</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，再下一个为</span><span lang=EN-US>16</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，</span><span lang=EN-US>24</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>，</span><span
lang=EN-US>32</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>，</span><span lang=EN-US>0…</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>等。</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l4 level1 lfo4;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US>cache_cache</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>变量实际上就是缓冲区结构的头指针。</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span></p>

<p class=MsoNormal style='text-indent:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span></span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>由此可以看出，缓冲区结构</span><span
lang=EN-US>kmem_cache_t</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>相当于</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的总控结构，缓冲区结构与</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构之间的关系如图</span><span lang=EN-US>6.12</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>所示：</span></p>

<p class=MsoNormal style='text-indent:21.25pt'><!--[if gte vml 1]><o:wrapblock><v:group
  id="_x0000_s1090" style='position:absolute;left:0;text-align:left;
  margin-left:31.5pt;margin-top:0;width:377.85pt;height:224.1pt;z-index:5'
  coordorigin="1600,5092" coordsize="7557,4482" o:allowincell="f">
  <v:rect id="_x0000_s1091" style='position:absolute;left:1829;top:5092;
   width:1374;height:830'>
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>缓冲区</span></p>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:rect><v:roundrect id="_x0000_s1092" style='position:absolute;left:1829;
   top:6586;width:1374;height:664' arcsize="10923f" fillcolor="gray">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span lang=EN-US>Slab</span><span style='font-family:
      宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:roundrect><v:roundrect id="_x0000_s1093" style='position:absolute;left:1829;
   top:7748;width:1374;height:664' arcsize="10923f" fillcolor="#ddd"
   strokecolor="silver">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span lang=EN-US>Slab</span><span style='font-family:
      宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:roundrect><v:roundrect id="_x0000_s1094" style='position:absolute;left:1829;
   top:8910;width:1374;height:664' arcsize="10923f" filled="f" fillcolor="#ddd"
   strokecolor="silver">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span lang=EN-US>Slab</span><span style='font-family:
      宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:roundrect><v:line id="_x0000_s1095" style='position:absolute' from="2516,5922"
   to="2516,6586">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1096" style='position:absolute' from="2287,7250"
   to="2287,7748">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1097" style='position:absolute' from="2287,8412"
   to="2287,8910">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1098" style='position:absolute;flip:y' from="2745,8412"
   to="2745,8910">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1099" style='position:absolute;flip:y' from="2745,7250"
   to="2745,7748">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1100" style='position:absolute' from="2971,5922"
   to="2971,6254">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1101" style='position:absolute' from="2971,6251"
   to="3429,6251">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1102" style='position:absolute' from="3432,6251"
   to="3432,8077">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1103" style='position:absolute;flip:x' from="3203,8080"
   to="3432,8080">
   <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
  </v:line><v:line id="_x0000_s1104" style='position:absolute' from="2287,5922"
   to="2287,6420">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1105" style='position:absolute;flip:x' from="1600,6420"
   to="2287,6420">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1106" style='position:absolute' from="1600,6420"
   to="1600,9242">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1107" style='position:absolute' from="1600,9242"
   to="1829,9242">
   <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
  </v:line><v:rect id="_x0000_s1108" style='position:absolute;left:4806;top:5092;
   width:1374;height:830'>
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>缓冲区</span></p>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:rect><v:roundrect id="_x0000_s1109" style='position:absolute;left:4806;
   top:6420;width:1374;height:664' arcsize="10923f" fillcolor="#ddd"
   strokecolor="silver">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span lang=EN-US>Slab</span><span style='font-family:
      宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:roundrect><v:roundrect id="_x0000_s1110" style='position:absolute;left:4806;
   top:7582;width:1374;height:664' arcsize="10923f" filled="f" fillcolor="#ddd"
   strokecolor="silver">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span lang=EN-US>Slab</span><span style='font-family:
      宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:roundrect><v:line id="_x0000_s1111" style='position:absolute' from="5264,5922"
   to="5264,6420">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1112" style='position:absolute' from="5264,7084"
   to="5264,7582">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1113" style='position:absolute;flip:y' from="5722,7084"
   to="5722,7582">
   <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
  </v:line><v:line id="_x0000_s1114" style='position:absolute;flip:y' from="5722,5922"
   to="5722,6420">
   <v:stroke dashstyle="1 1" startarrow="block" endcap="round"/>
  </v:line><v:line id="_x0000_s1115" style='position:absolute' from="5264,5922"
   to="5264,6420">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:rect id="_x0000_s1116" style='position:absolute;left:7554;top:5092;
   width:1374;height:830'>
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>缓冲区</span></p>
      <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:
      "Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:rect><v:roundrect id="_x0000_s1117" style='position:absolute;left:7554;
   top:6586;width:1374;height:664' arcsize="10923f" fillcolor="gray">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span lang=EN-US>Slab</span><span style='font-family:
      宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:roundrect><v:roundrect id="_x0000_s1118" style='position:absolute;left:7554;
   top:7748;width:1374;height:664' arcsize="10923f" fillcolor="#ddd"
   strokecolor="silver">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span lang=EN-US>Slab</span><span style='font-family:
      宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:roundrect><v:roundrect id="_x0000_s1119" style='position:absolute;left:7554;
   top:8910;width:1374;height:664' arcsize="10923f" filled="f" fillcolor="#ddd"
   strokecolor="silver">
   <v:textbox>
    <![if !mso]>
    <table cellpadding=0 cellspacing=0 width="100%">
     <tr>
      <td><![endif]>
      <div>
      <p class=MsoNormal><span lang=EN-US>Slab</span><span style='font-family:
      宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span></p>
      </div>
      <![if !mso]></td>
     </tr>
    </table>
    <![endif]></v:textbox>
  </v:roundrect><v:line id="_x0000_s1120" style='position:absolute' from="8241,5922"
   to="8241,6586">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1121" style='position:absolute' from="8012,7250"
   to="8012,7748">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1122" style='position:absolute' from="8012,8412"
   to="8012,8910">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1123" style='position:absolute;flip:y' from="8470,8412"
   to="8470,8910">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1124" style='position:absolute;flip:y' from="8470,7250"
   to="8470,7748">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1125" style='position:absolute' from="8696,5922"
   to="8696,6254">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1126" style='position:absolute' from="8699,6254"
   to="9157,6254">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1127" style='position:absolute' from="9157,6251"
   to="9157,8077">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1128" style='position:absolute;flip:x' from="8928,8080"
   to="9157,8080">
   <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
  </v:line><v:line id="_x0000_s1129" style='position:absolute' from="8012,5922"
   to="8012,6420">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1130" style='position:absolute;flip:x' from="7325,6420"
   to="8012,6420">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1131" style='position:absolute' from="7325,6420"
   to="7325,9242">
   <v:stroke dashstyle="1 1" endcap="round"/>
  </v:line><v:line id="_x0000_s1132" style='position:absolute' from="7325,9242"
   to="7554,9242">
   <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
  </v:line><v:line id="_x0000_s1133" style='position:absolute' from="5035,5922"
   to="5035,6254"/>
  <v:line id="_x0000_s1134" style='position:absolute' from="4577,6254" to="5035,6254"/>
  <v:line id="_x0000_s1135" style='position:absolute' from="4577,6254" to="4577,8080"/>
  <v:line id="_x0000_s1136" style='position:absolute' from="4577,8083" to="4806,8083">
   <v:stroke endarrow="block"/>
  </v:line><v:line id="_x0000_s1137" style='position:absolute' from="3203,5424"
   to="4806,5424">
   <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
  </v:line><v:line id="_x0000_s1138" style='position:absolute' from="6180,5424"
   to="7554,5424">
   <v:stroke dashstyle="1 1" endarrow="block" endcap="round"/>
  </v:line><w:wrap type="topAndBottom"/>
 </v:group><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0>
  <tr>
   <td width=41 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=506 height=305 src="6.3.3.files/image003.gif" v:shapes="_x0000_s1090 _x0000_s1091 _x0000_s1092 _x0000_s1093 _x0000_s1094 _x0000_s1095 _x0000_s1096 _x0000_s1097 _x0000_s1098 _x0000_s1099 _x0000_s1100 _x0000_s1101 _x0000_s1102 _x0000_s1103 _x0000_s1104 _x0000_s1105 _x0000_s1106 _x0000_s1107 _x0000_s1108 _x0000_s1109 _x0000_s1110 _x0000_s1111 _x0000_s1112 _x0000_s1113 _x0000_s1114 _x0000_s1115 _x0000_s1116 _x0000_s1117 _x0000_s1118 _x0000_s1119 _x0000_s1120 _x0000_s1121 _x0000_s1122 _x0000_s1123 _x0000_s1124 _x0000_s1125 _x0000_s1126 _x0000_s1127 _x0000_s1128 _x0000_s1129 _x0000_s1130 _x0000_s1131 _x0000_s1132 _x0000_s1133 _x0000_s1134 _x0000_s1135 _x0000_s1136 _x0000_s1137 _x0000_s1138"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></p>

<p class=MsoNormal style='margin-left:21.25pt;mso-outline-level:1'><span
lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>图</span><span lang=EN-US>6.12</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>缓冲区结构</span><span lang=EN-US>kmem_cache_t</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>与</span><span lang=EN-US>Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构</span><span
lang=EN-US>slab_t</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>之间的关系</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span></span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>在图</span><span
lang=EN-US>6.12</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>中，深灰色表示全满的</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，浅灰色表示含有空闲对象的</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，而无色表示空的</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>。缓冲区结构之间形成一个单向链表，</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构之间形成一个双向链表。另外，缓冲区结构还有分别指向满、半满、空闲</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构的指针。</span></p>

<p class=MsoNormal style='margin-left:21.25pt;mso-outline-level:1'><span
lang=EN-US>2</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>．专用缓冲区的建立和撤销</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span></span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>专用缓冲区是通过</span><span
lang=EN-US>kmem_cache_create</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>（）函数建立的，函数原型为：</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span>kmem_cache_t *kmem_cache_<span
class=GramE>create(</span>const char *name, size_t size, size_t offset,</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> long c_flags,</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
class=GramE>void</span> (*ctor) (void *objp, kmem_cache_t *cachep, unsigned
long flags),</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>void</span> (*dtor) (void *objp, kmem_cache_t *cachep,
unsigned long flags))</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>对其参数说明如下：</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US>name</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：</span> <span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>缓冲区名</span><span
lang=EN-US> ( 19 </span><span class=GramE><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>个</span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>字符</span><span lang=EN-US>) </span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US>size</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：</span> <span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>对象大小</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US>offset </span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：所请求的着色偏移量。</span> </p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US>c_flags </span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：对缓冲区的设置标志：</span></p>

<p class=MsoNormal style='margin-left:50.65pt'><span lang=EN-US>SLAB_HWCACHE_ALIGN</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：表示与第一个高速缓存中的缓冲行边界（</span><span lang=EN-US>16</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>或</span><span lang=EN-US>32</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>字节）对齐。</span><span
lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span>SLAB_NO_REAP</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：不允许系统回收内存</span><span lang=EN-US> </span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>SLAB_CACHE_DMA</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：表示</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>使用的是</span><span lang=EN-US>DMA</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>内存</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US>ctor </span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：构造函数（一般都为</span><span lang=EN-US>NULL) </span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US>dtor </span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：<span class=GramE>析构函数</span>（一般都为</span><span lang=EN-US>NULL)
</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US>objp </span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：指向对象的指针</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US>cachep </span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：指向缓冲区</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>对专用缓冲区的创建过程简述如下：</span></p>

<p class=MsoNormal style='text-indent:22.8pt'><span lang=EN-US>kmem_cache_create</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）函数要进行一系列的计算，以确定最佳的</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>构成。包括：每个</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>由几个页面组成，划分为多少个对象；</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的描述结构</span><span lang=EN-US>slab_t</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>应该放在</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的外面还是放在</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的尾部；还有“颜色”的数量等等。并根据调用参数和计算结果设置</span><span lang=EN-US>kmem_cache_t</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构中的各个域，包括两个函数指针</span><span lang=EN-US>ctor</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>和</span><span lang=EN-US>dtor</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>。最后，将</span><span
lang=EN-US>kmem_cache_t</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构插入到</span><span
lang=EN-US>cache_cache</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>的</span><span
lang=EN-US>next</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>队列中。</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>但请注意，函数</span><span lang=EN-US>kmem_cache_create</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）所创建的缓冲区中还没有包含任何</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，因此，也没有空闲的对象。只有以下两个条件都为真时，才给缓冲区分配</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>：</span></p>

<p class=MsoNormal style='margin-left:40.2pt;text-indent:-28.8pt;mso-list:l1 level1 lfo5;
tab-stops:list 40.2pt'><![if !supportLists]><span lang=EN-US style='mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>（1）<span style='font:7.0pt "Times New Roman"'>
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>已发出一个分配新对象的请求；</span></p>

<p class=MsoNormal style='margin-left:40.2pt;text-indent:-28.8pt;mso-list:l1 level1 lfo5;
tab-stops:list 40.2pt'><![if !supportLists]><span lang=EN-US style='mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>（2）<span style='font:7.0pt "Times New Roman"'>
</span></span></span><![endif]><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>缓冲区不包含任何空闲对象；</span></p>

<p class=MsoNormal style='margin-left:11.4pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span></span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>当这两个条件都成立时，</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>分配模式就调用</span><span lang=EN-US>kmem_cache_grow</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）函数给缓冲区分配一个新的</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>。其中，该函数调用</span><span lang=EN-US>kmem_gatepages()</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>从伙伴系统获得一组页面；然后又调用</span><span lang=EN-US>kmem_cache_slabgmt()</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>获得一个新的</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构；还要调用</span><span lang=EN-US>kmem_cache_init_objs()</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>为新</span><span lang=EN-US>Slab</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中的所有对象申请构造方法（如果定义的话）；最后，调用</span><span
lang=EN-US>kmem_slab_link_end()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>把这个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>结构插入到缓冲区中</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>链表的末尾。</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>分配模式的最大好处就是给频繁使用的数据结构建立专用缓冲区。但到目前的版本为止，</span><span
lang=EN-US>Linux</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>内核中多数专用缓冲区的建立都用</span><span
lang=EN-US>NULL</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>作为构造函数的指针，例如，为虚存区间结构</span><span
lang=EN-US>vm_area_struct</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>建立的专用缓冲区</span><span
lang=EN-US>vm_area_cachep</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>：</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span>vm_area_cachep = kmem_cache_<span
class=GramE>create(</span>&quot;vm_area_struct&quot;,</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>sizeof(</span>struct vm_area_struct), 0,</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SLAB_HWCACHE_ALIGN, NULL, NULL);</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>就把构造和<span class=GramE>析构</span>函数的指针置为</span><span
lang=EN-US>NULL</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>，也就是说，内核并没有充分利用</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>管理机制所提供的好处。为了说明如何利用专用缓冲区，我们从内核代码中选取一个构造函数不为空的简单例子，这个例子与网络子系统有关，在</span><span
lang=EN-US>net/core/buff.c</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中定义：</span></p>

<p class=MsoNormal style='margin-left:21.25pt'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span><span class=GramE>void</span>
__init<span style='mso-spacerun:yes'>&nbsp; </span>skb_init(void)</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:23.4pt'><span
lang=EN-US>{</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:23.4pt'><span
lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp; </span><span
class=GramE>int<span style='mso-spacerun:yes'>&nbsp; </span>i</span>;</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>skbuff_head_cache
= kmem_cache_<span class=GramE>create(</span>&quot;skbuff_head_cache&quot;,</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>sizeof(</span>struct sk_buff),</span></p>

<p class=MsoNormal style='mso-outline-level:1'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>0,</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SLAB_HWCACHE_ALIGN,</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>skb_headerinit, NULL);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (!skbuff_head_cache)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>panic(</span>&quot;cannot create skbuff cache&quot;);</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>for</span> (i=0; i&lt;NR_CPUS; i++)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>skb_queue_head_<span class=GramE>init(</span>&amp;skb_head_pool[i].list);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>从代码中可以看出，</span><span lang=EN-US>skb_init</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）调用</span><span lang=EN-US>kmem_cache_create</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）为网络子系统建立一个</span><span lang=EN-US>sk_buff</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>数据结构的专用缓冲区，其名称为“</span><span lang=EN-US>skbuff_head_cache</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>”（</span> <span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>你可以通过读取／</span><span
lang=EN-US>proc/slabinfo/</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>文件得到所有缓冲区的名字）。调用参数</span><span
lang=EN-US>offset</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>为</span><span lang=EN-US>0</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，表示第一个对象在</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中的位移并无特殊要求。但是参数</span><span lang=EN-US>flags</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>为</span><span lang=EN-US>SLAB_HWCACHE_ALIGN</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，表示</span><span lang=EN-US>Slab</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中的对象要与高速缓存中的缓冲行边界对齐。对象的构造函数为</span><span lang=EN-US>skb_headerinit</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（），<span class=GramE>而析构函数</span>为空，也就是说，在释放一个</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>时无需对各个缓冲区进行特殊的处理。</span></p>

<p class=MsoNormal style='text-indent:21.25pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>当从内核卸载一个模块时，同时应当撤销为这个模块中的数据结构所建立的缓冲区，这是通过调用</span><span
lang=EN-US>kmem_cache_destroy()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>函数来完成的。从</span><span
lang=EN-US>Linux<st1:chsdate Year="1899" Month="12" Day="30" IsLunarDate="False"
IsROCDate="False" w:st="on">2.4.16</st1:chsdate></span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>内核代码中进行查找，对这个函数的调用非常少。</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-outline-level:1'><span lang=EN-US>3</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>．通用缓冲区</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>在内核中初始化开销不大的数据结构可以合用一个通用的缓冲区。通用缓冲区非常类似于物理页面分配中的大小分区，最小的为</span><span
lang=EN-US>32</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>，然后依次为</span><span lang=EN-US>64</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>、</span><span lang=EN-US>128</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>、</span><span
lang=EN-US>…</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>直至</span><span lang=EN-US>128K</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（即</span><span lang=EN-US>32</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>个页面），但是，对通用缓冲区的管理又采用的是</span><span
lang=EN-US>Slab</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>方式。从通用缓冲区中分配和释放缓冲区的函数为：</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:24.0pt'><span
class=GramE><span lang=EN-US>void</span></span><span lang=EN-US>
*kmalloc(size_t size, int flags);</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:24.0pt'><span
class=GramE><span lang=EN-US>Void<span style='mso-spacerun:yes'>&nbsp;
</span>kree</span></span><span lang=EN-US>(const void *objp);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>因此，当一个数据结构的使用根本不频繁时，或其大小不足一个页面时，就没有必要给其分配专用缓冲区，而应该调用</span><span
lang=EN-US>kmallo()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>进行分配。如果数据结构的大小接近一个页面，则干脆通过</span><span
lang=EN-US>alloc_page()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>为之分配一个页面。</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>事实上，在内核中，尤其是驱动程序中，有大量的数据结构仅仅是一次性使用，而且所占内存只有几十个字节，因此，一般情况下调用</span><span
lang=EN-US>kmallo()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>给内核数据结构分配内存就足够了。另外，因为，在</span><span
lang=EN-US>Linux2.0</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>以前的版本一般都调用</span><span
lang=EN-US>kmallo()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>给内核数据结构分配内存，因此，调用该函数的一个优点是（让你开发的驱动程序）能保持向后兼容。</span></p>

<p class=MsoNormal style='mso-outline-level:1'><st1:chsdate Year="1899"
Month="12" Day="30" IsLunarDate="False" IsROCDate="False" w:st="on"><span
 lang=EN-US>6.3.4</span></st1:chsdate><span lang=EN-US> </span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>内核空间非连续内存区的管理</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>我们说，任何时候，</span><span lang=EN-US>CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>访问的都是虚拟内存，那么，在你编写驱动程序，或者编写模块时，</span><span lang=EN-US>Linux</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>给你分配什么样的内存？它处于</span><st1:chmetcnv UnitName="g"
SourceValue="4" HasSpace="False" Negative="False" NumberType="1" TCSC="0"
w:st="on"><span lang=EN-US>4G</span></st1:chmetcnv><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>空间的什么位置？这就是我们要讨论的非连续内存。</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>首先，非连续内存处于</span><st1:chmetcnv
UnitName="g" SourceValue="3" HasSpace="False" Negative="False" NumberType="1"
TCSC="0" w:st="on"><span lang=EN-US>3G</span></st1:chmetcnv><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>到</span><st1:chmetcnv UnitName="g" SourceValue="4"
HasSpace="False" Negative="False" NumberType="1" TCSC="0" w:st="on"><span
 lang=EN-US>4G</span></st1:chmetcnv><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>之间，也就是处于内核空间，如图</span><span
lang=EN-US>6.13</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>所示：</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>high_memory </span></p>

<p class=MsoNormal><!--[if gte vml 1]><v:group id="_x0000_s1070" style='position:absolute;
 left:0;text-align:left;margin-left:34.35pt;margin-top:0;width:377.85pt;
 height:81.05pt;z-index:4' coordorigin="1651,1595" coordsize="7557,1621"
 o:allowincell="f">
 <v:roundrect id="_x0000_s1071" style='position:absolute;left:1651;top:2246;
  width:1603;height:830' arcsize="10923f" filled="f">
  <v:textbox>
   <![if !mso]>
   <table cellpadding=0 cellspacing=0 width="100%">
    <tr>
     <td><![endif]>
     <div>
     <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
     mso-hansi-font-family:"Times New Roman"'>物理内存区</span></p>
     <p class=MsoNormal><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
     mso-hansi-font-family:"Times New Roman"'>的映射</span></p>
     </div>
     <![if !mso]></td>
    </tr>
   </table>
   <![endif]></v:textbox>
 </v:roundrect><v:roundrect id="_x0000_s1072" style='position:absolute;left:4628;
  top:2246;width:1145;height:830' arcsize="10923f" filled="f"/>
 <v:roundrect id="_x0000_s1073" style='position:absolute;left:6689;top:2246;
  width:1145;height:830' arcsize="10923f" filled="f"/>
 <v:line id="_x0000_s1074" style='position:absolute' from="1651,2249" to="8292,2249"/>
 <v:line id="_x0000_s1075" style='position:absolute' from="1651,3063" to="8292,3063"/>
 <v:line id="_x0000_s1076" style='position:absolute' from="1651,2249" to="1651,3079"/>
 <v:line id="_x0000_s1077" style='position:absolute' from="3254,2552" to="4628,2552">
  <v:stroke startarrow="block" endarrow="block"/>
 </v:line><v:line id="_x0000_s1078" style='position:absolute' from="5773,2552"
  to="6689,2552">
  <v:stroke startarrow="block" endarrow="block"/>
 </v:line><v:line id="_x0000_s1079" style='position:absolute;flip:x' from="8292,2884"
  to="8521,3216"/>
 <v:line id="_x0000_s1080" style='position:absolute;flip:x' from="8532,2884"
  to="8761,3216"/>
 <v:line id="_x0000_s1081" style='position:absolute;flip:x' from="8292,2080"
  to="8521,2412"/>
 <v:line id="_x0000_s1082" style='position:absolute;flip:x' from="8521,2080"
  to="8750,2412"/>
 <v:line id="_x0000_s1083" style='position:absolute' from="8750,3050" to="9208,3050"/>
 <v:line id="_x0000_s1084" style='position:absolute' from="8750,2233" to="9208,2233"/>
 <v:line id="_x0000_s1085" style='position:absolute' from="9208,2249" to="9208,3079"/>
 <v:line id="_x0000_s1086" style='position:absolute' from="1651,1930" to="1651,2262">
  <v:stroke endarrow="block"/>
 </v:line><v:line id="_x0000_s1087" style='position:absolute' from="3274,1595"
  to="3274,2233">
  <v:stroke endarrow="block"/>
 </v:line><v:line id="_x0000_s1088" style='position:absolute' from="4628,1914"
  to="4628,2246">
  <v:stroke endarrow="block"/>
 </v:line><v:line id="_x0000_s1089" style='position:absolute' from="9208,1914"
  to="9208,2246">
  <v:stroke endarrow="block"/>
 </v:line></v:group><![endif]--><![if !vml]><span style='mso-ignore:vglayout;
position:relative;z-index:4'><span style='left:0px;position:absolute;
left:40px;top:-1px;width:516px;height:110px'><img width=516 height=110
src="6.3.3.files/image004.gif" v:shapes="_x0000_s1070 _x0000_s1071 _x0000_s1072 _x0000_s1073 _x0000_s1074 _x0000_s1075 _x0000_s1076 _x0000_s1077 _x0000_s1078 _x0000_s1079 _x0000_s1080 _x0000_s1081 _x0000_s1082 _x0000_s1083 _x0000_s1084 _x0000_s1085 _x0000_s1086 _x0000_s1087 _x0000_s1088 _x0000_s1089"></span></span><![endif]><span
lang=EN-US><span style='mso-spacerun:yes'>&nbsp;</span>PAGE_OFFSET<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>VMALLOC_START<span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>4GB</span></p>

<p class=MsoNormal><!--[if gte vml 1]><o:wrapblock><v:line id="_x0000_s1069"
  style='position:absolute;left:0;text-align:left;z-index:3' from="34.35pt,0"
  to="377.85pt,0" o:allowincell="f" stroked="f">
  <w:wrap type="topAndBottom"/>
 </v:line><![endif]--><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
</p>

<p class=MsoNormal><span lang=EN-US><span style='mso-tab-count:6'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp; </span></span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-tab-count:4'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>8MB<span style='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>内存区</span><span lang=EN-US><span style='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>4KB<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>内存区</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-tab-count:4'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>图</span><span lang=EN-US>6.13 </span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>从</span><span
lang=EN-US>PAGE_OFFSET</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>开始的内核地址区间</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>图中，</span><span lang=EN-US>PAGE_OFFSET</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>为</span><span lang=EN-US>3GB</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>，</span><span
lang=EN-US>high_memory</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>为保存物理地址最高值的变量，</span><span
lang=EN-US>VMALLOC_START</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>为非连续区的<span
class=GramE>的</span>起始地址，定义于</span><span lang=EN-US>include</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>／</span><span lang=EN-US>i386/pgtable.h</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中：</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>#define VMALLOC_<span
class=GramE>OFFSET<span style='mso-spacerun:yes'>&nbsp; </span>(</span>8*1024*1024)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>#define VMALLOC_START<span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span>(((unsigned long) high_memory +
2*VMALLOC_OFFSET-1) &amp; \<span class=GramE>~(</span>VMALLOC_OFFSET-1))</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>在物理地址的末尾与第一个内存区之间插入了一个</span><span lang=EN-US>8MB</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（</span><span lang=EN-US>VMALLOC_OFFSET</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>）的区间，这是一个安全区，目的是为了“捕获”对非连续区的非法访问。出于同样的理由，在其他非连续的内存区之间也插入了</span><span
lang=EN-US>4K</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>大小的安全区。<span class=GramE>每个非</span>连续内存区的大小都是</span><span
lang=EN-US>4096</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的倍数。</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span>1</span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>．非连续区的数据结构</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span><span class=GramE><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>描述非</span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>连续区的数据结构为</span><span lang=EN-US>struct vm_struct</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，定义于</span><span lang=EN-US>include/linux/vmalloc.h</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中：</span></p>

<p class=MsoNormal style='text-indent:21.25pt'><span class=GramE><span
lang=EN-US>struct</span></span><span lang=EN-US> vm_struct {</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long flags;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>void</span> * addr;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long size;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>struct</span> vm_struct * next;</span></p>

<p class=MsoNormal style='text-indent:21.25pt'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span><span class=GramE>struct</span> vm_struct * vmlist;</span></p>

<p class=MsoNormal style='text-indent:22.2pt'><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>非连续区组成一个单链表，链表第一个元素的地址存放在变量</span><span
lang=EN-US>vmlist</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>中。</span><span lang=EN-US>Addr</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>域是内存区的起始地址；</span><span lang=EN-US>size</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>是内存区的大小加</span><span lang=EN-US>4096(</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>安全区的大小</span><span lang=EN-US>)</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>。</span></p>

<p class=MsoNormal><span lang=EN-US>2</span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>．创建一个非连续区的结构</span><span
lang=EN-US><span style='mso-spacerun:yes'>&nbsp; </span></span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>函数</span><span lang=EN-US>get_vm_area</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）创建一个新的非连续区结构，其代码在</span><span lang=EN-US>mm/vmalloc.c</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中：</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span><span class=GramE>struct</span> vm_struct * get_vm_area(unsigned long
size, unsigned long flags)</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span>{</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long addr;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>struct</span> vm_struct **p, *tmp, *area;</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>area</span> = (struct vm_struct *)
kmalloc(sizeof(*area), GFP_KERNEL);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (!area)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>return</span> NULL;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>size</span> += PAGE_SIZE;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>addr</span> = VMALLOC_START;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>write_<span class=GramE>lock(</span>&amp;vmlist_lock);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>for</span> (p = &amp;vmlist; (tmp = *p) ; p = &amp;tmp-&gt;next) {</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> ((size + addr) &lt; addr)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>goto</span> out;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (size + addr &lt;= (unsigned long)
tmp-&gt;addr)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
class=GramE>break</span>;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>addr</span> = tmp-&gt;size + (unsigned long)
tmp-&gt;addr;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (addr &gt; VMALLOC_END-size)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>goto</span> out;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>area</span>-&gt;flags = flags;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>area</span>-&gt;addr = (void *)addr;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>area</span>-&gt;size = size;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>area</span>-&gt;next = *p;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>*p = area;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>write_<span class=GramE>unlock(</span>&amp;vmlist_lock);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>return</span> area;</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=GramE><span lang=EN-US>out</span></span><span
lang=EN-US>:</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>write_<span class=GramE>unlock(</span>&amp;vmlist_lock);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>kfree(</span>area);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>return</span> NULL;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span>}</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>这个函数比较简单，就是在单链表中插入一个元素。其中调用了</span><span
lang=EN-US>kmalloc()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>和</span><span
lang=EN-US>kfree()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>函数</span><span
lang=EN-US>,</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>分别用来为</span><span lang=EN-US>vm_struct</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>结构分配内存和释放所分配的内存。</span></p>

<p class=MsoNormal><span lang=EN-US>3</span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>．分配非连续内存区</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span>vmalloc</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>（）函数给内核分配一个非连续的内存区，在</span><span
lang=EN-US>/include/linux/vmalloc.h</span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中定义如下：</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span><span class=GramE>static</span> inline void * vmalloc (unsigned long
size)</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span>{</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>return</span> __vmalloc(size, GFP_KERNEL | __GFP_HIGHMEM,
PAGE_KERNEL);</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span>}</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span>vmalloc</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>（）最终调用的是</span><span lang=EN-US>__vmalloc</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）函数，该函数的代码在</span><span lang=EN-US>mm/vmalloc.c</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中：</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span><span class=GramE>void</span> * __vmalloc (unsigned long size, int
gfp_mask, pgprot_t prot)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span>{</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>void</span> * addr;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>struct</span> vm_struct *area;</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>size</span> = PAGE_ALIGN(size);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (!size || (size &gt;&gt; PAGE_SHIFT) &gt;
num_physpages) {</span></p>

<p class=MsoNormal style='mso-outline-level:1'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>BUG(</span>);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>return</span> NULL;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>area</span> = get_vm_area(size, VM_ALLOC);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (!area)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>return</span> NULL;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>addr</span> = area-&gt;addr;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (vmalloc_area_pages(VMALLOC_VMADDR(addr),
size, gfp_mask, prot)) {</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>vfree(</span>addr);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>return</span> NULL;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>return</span> addr;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span><span
style='mso-spacerun:yes'>&nbsp;</span>}</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>函数首先把</span><span lang=EN-US>size</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>参数取整为页面大小（</span><span lang=EN-US>4096</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>）的一个倍数，也就是按页的大小进行对齐，然后进行有效性检查，如果有大小合适的可用内存，就调用</span><span
lang=EN-US>get_vm_area</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>（）获得一个内存区的结构。但真正的内存区还没有获得，函数</span><span
lang=EN-US>vmalloc_area_pages</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>（）真正进行非连续内存区的分配：</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=GramE>inline</span>
int vmalloc_area_pages (unsigned long address, unsigned long size,</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>int</span> gfp_mask, pgprot_t prot)</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span>{</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>pgd_t * dir;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span><span class=GramE>unsigned</span> long
end = address + size;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>int</span> ret;</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>dir</span> = pgd_offset_k(address);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>spin_<span class=GramE>lock(</span>&amp;init_mm.page_table_lock);</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:21.25pt'><span
lang=EN-US><span style='mso-spacerun:yes'>&nbsp;</span><span class=GramE>do</span>
{</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;</span>pmd_t *pmd;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>pmd</span> = pmd_alloc(&amp;init_mm, dir, address);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>ret</span> = -ENOMEM;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (!pmd)</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>break</span>;</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>ret</span> = -ENOMEM;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>if</span> (alloc_area_pmd(pmd, address, end - address,
gfp_mask, prot))</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>break</span>;</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>address</span> = (address + PGDIR_SIZE) &amp;
PGDIR_MASK;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>dir</span>++;</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>ret</span> = 0;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>} while (address &amp;&amp; (address &lt; end));</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>spin_<span class=GramE>unlock(</span>&amp;init_mm.page_table_lock);</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;</span><span class=GramE>return</span>
ret;</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span>}</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span><span
style='mso-spacerun:yes'>&nbsp;</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span></span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>该函数有两个主要的参数，</span><span
lang=EN-US>address</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>表示内存区的起始地址，</span><span
lang=EN-US>size</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>表示内存区的大小。内存区的末尾地址赋给了局部变量</span><span
lang=EN-US>end</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>。其中还调用了几个主要的函数或宏：</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l2 level1 lfo6;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US>pgd_offset_k</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）宏导出这个内存区起始地址在页目录中的目录项；</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l2 level1 lfo6;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US>pmd_alloc</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）为新的内存区创建一个中间页目录；</span></p>

<p class=MsoNormal style='margin-left:21.25pt;text-indent:-21.25pt;mso-list:
l2 level1 lfo6;tab-stops:list 21.25pt'><![if !supportLists]><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:Wingdings;mso-bidi-font-family:
宋体'><span style='mso-list:Ignore'>・<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US>alloc_area_pmd</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）为新的中间页目录分配所有相关的页表，并更新页的总目录；该函数调用</span><span lang=EN-US>pte_alloc_kernel()</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>函数来分配一个新的页表，之后再调用</span><span lang=EN-US>alloc_area_pte</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）为页表项分配具体的物理页面。</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>从</span><span lang=EN-US>vmalloc_area_pages</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（）函数可以看出，该函数实际建立起了非连续内存区到物理页面的映射。</span></p>

<p class=MsoNormal><span lang=EN-US>4</span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>．</span><span
lang=EN-US>kmalloc()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>与</span><span
lang=EN-US>vmalloc()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>的区别</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>kmalloc()</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>与</span><span lang=EN-US>vmalloc() </span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>都是在内核代码中提供给其他子系统用来分配内存的函数，但二者有何区别？</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>从前面的介绍已经看出，这两个函数所分配的内存都处于内核空间，即从</span><span
lang=EN-US>3GB</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>～</span><span lang=EN-US>4GB</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>；但位置不同，</span><span lang=EN-US>kmalloc()</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>分配的内存处于</span><span lang=EN-US>3GB</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>～</span><span lang=EN-US>high_memory</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>之间，而</span><span lang=EN-US>vmalloc()</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>分配的内存在</span><span lang=EN-US>VMALLOC_START</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>～</span><span lang=EN-US>4GB</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>之间，也就是非连续内存区。一般情况下在驱动程序中都是调用</span><span
lang=EN-US>kmalloc()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>来给数据结构分配内存，而</span><span
lang=EN-US>vmalloc()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>用在为活动的交换区分配数据结构，为某些</span><span
lang=EN-US>I/O</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>驱动程序分配缓冲区，或为模块分配空间，例如在</span><span
lang=EN-US>include/asm-i386/module.h</span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>中定义了如下语句：</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span>#define module_map(x)<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>vmalloc(x)</span></p>

<p class=MsoNormal><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;
</span></span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>其含义就是把模块映射到非连续的内存区。</span></p>

<p class=MsoNormal><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span></span><span style='font-family:宋体;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>与</span><span
lang=EN-US>kmalloc()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>和</span><span
lang=EN-US>vmalloc()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>相对应，两个释放内存的函数为</span><span
lang=EN-US>kfree()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>和</span><span
lang=EN-US>vfree()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>。</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
