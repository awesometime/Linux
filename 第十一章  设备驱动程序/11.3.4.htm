<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="11.3.4.files/filelist.xml">
<title> RAM 盘驱动程序的实现</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="chsdate" downloadurl=""/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>CLJ</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>CLJ</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>0</o:TotalTime>
  <o:Created>2007-08-17T04:00:00Z</o:Created>
  <o:LastSaved>2007-08-17T04:00:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>259</o:Words>
  <o:Characters>1482</o:Characters>
  <o:Lines>12</o:Lines>
  <o:Paragraphs>3</o:Paragraphs>
  <o:CharactersWithSpaces>1738</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:PunctuationKerning/>
  <w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:SimSun;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:宋体;
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-font-kerning:1.0pt;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
 /* Page Definitions */
 @page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:42.55pt;
	mso-footer-margin:49.6pt;
	mso-paper-source:0;
	layout-grid:15.6pt;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:普通表格;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]-->
</head>

<body lang=ZH-CN style='tab-interval:21.0pt;text-justify-trim:punctuation'>

<div class=Section1 style='layout-grid:15.6pt'>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><st1:chsdate Year="1899" Month="12" Day="30"
IsLunarDate="False" IsROCDate="False" w:st="on"><span lang=EN-US
 style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
 font-weight:normal'>11.3.4</span></st1:chsdate><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'> RAM </span><span style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'>盘驱动程序的实现<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'><span
style='mso-spacerun:yes'>&nbsp;</span>1. RAM</span><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>盘的硬件<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:26.05pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>利用<span
lang=EN-US> RAM </span>盘的驱动程序可以访问内存的任何部分，它的主要用途是保留一部分内存并<span class=GramE>象</span>普通磁盘一样来使用它。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:26.6pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'>RAM</span><span style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'>盘的思想很简单，<span class=GramE>块设备</span>是有两个操作的命令的存储介质：即写数据块和读数据块。通常这些数据存储于旋转存储设备上如软盘和硬盘，<span
lang=EN-US>RAM</span>盘则简单得多，它利用预先分配的主存来存储数据块。因此不存在向磁盘那样的寻道操作，其读写操作只是在内存间进行的。<span
lang=EN-US>RAM</span><span class=GramE>盘具有</span>快速存取的优点<span lang=EN-US>(</span>没有寻道和旋转延迟的时间<span
lang=EN-US>)</span>，适合于存储需要频繁存取的数据。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.9pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>操作系统根据对<span
lang=EN-US> RAM </span>盘的需求为它分配内存的大小，<span lang=EN-US>RAM</span>盘被分成几块，每块的大小同实际磁盘的块的大小相同。一个<span
lang=EN-US>RAM</span>盘驱动程序支持将存储器中的若干区域当作<span lang=EN-US>RAM</span>盘来使用，不同的<span
lang=EN-US> RAM </span>盘用<span class=GramE>次设备号</span>来区分。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'>2. Linux </span><span
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'>中<span lang=EN-US>RAM</span>盘的驱动程序<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.35pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'>RAM</span><span style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'>盘的驱动程序同其它所有的驱动程序一样都是由一组函数组成，对<span
lang=EN-US>RAM</span>盘的操作实际上是对内存的操作，它不需要中断机制，故<span lang=EN-US>RAM</span>盘的驱动程序不包括中断服务子程序<span
lang=EN-US>.</span>。一般我们对于一个驱动程序的分析是在了解硬件的基础上从该设备所提供的操作入手的，相应的写驱动程序也应该是这样的。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.35pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>下面是<span
lang=EN-US> RAM </span>盘操作的结构：<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.35pt;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'>s</span></span><span lang=EN-US style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'> static
struct block_device_operations rd_bd_op = {<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.35pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>owner</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>THIS_MODULE,<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.35pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>open</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>rd_open,<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.35pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>ioctl</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>rd_ioctl,<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.35pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><span style='mso-spacerun:yes'>&nbsp;</span>};<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'>在<span lang=EN-US>Linux </span>中，<span
lang=EN-US>RAM</span>盘的主设备号是<span lang=EN-US>1</span>。<span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span></span>在<span lang=EN-US> rd_open ( ) </span>函数中<span
lang=EN-US>,</span>它首先检测设备号是否<span lang=EN-US>INITRD_MINOR</span>，由于<span
lang=EN-US>INITRD </span>是在系统一启动的时候就已经创建了的，其中<span class=GramE>映象</span>的是操作系统从偏移地址<span
lang=EN-US>0</span>开始的内容，即内核空间，如果是内核空间，其接口需要相应的发生变换即：<span lang=EN-US>filp-&gt;f_op
= &amp;initrd_fops</span>。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:29.75pt;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'>static</span></span><span lang=EN-US style='font-size:
10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>
struct file_operations initrd_fops = {<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:29.75pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>read</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>initrd_read,<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:29.75pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>release</span>:<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>initrd_release,<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:29.75pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><span style='mso-spacerun:yes'>&nbsp;</span>};<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'>对于<span lang=EN-US>INITRD</span>盘的操作用户只有读和释放的权限而无写的权限。<span
lang=EN-US>initrd_read ( ) </span>函数执行的是从<span class=GramE>内核区</span>进行的读操作，故而是利用<span
lang=EN-US> memcpy_tofs (buf</span>，<span lang=EN-US> (char *)
initrd_start+file-&gt;f_pos</span>，<span lang=EN-US>count ) </span>去完成的。<span
lang=EN-US>initrd_release ( ) </span>函数在判断没有用户操作这个设备之后，以页的方式把<span lang=EN-US>
INITRD </span>盘所占的内存释放掉。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:23.8pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>在普通<span
lang=EN-US> RAM </span>盘接口中的另一个函数 为<span lang=EN-US>rd_ioctl ( ) </span>，同其它设备驱动程序一样是执行一些输入<span
lang=EN-US>/</span>输出的控制操作。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:5.95pt;text-align:left;
text-indent:23.8pt;mso-layout-grid-align:none;text-autospace:none'><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'>RAM</span><span style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'>盘的驱动程序可以以模块的形式进行编译，所以驱动程序中还有一些关于模块的操作，关于模块的知识请参见上一章。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:155.9pt;text-align:left;
text-indent:-125.85pt;mso-layout-grid-align:none;text-autospace:none'><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'>int init_module(void)</span><span style='font-size:
10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>　<span
lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>执行<span
lang=EN-US>rd_init();<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:155.9pt;text-align:left;
text-indent:-125.85pt;mso-layout-grid-align:none;text-autospace:none'><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'>void cleanup_module(void)</span><span style='font-size:
10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>　释放模块的时候首先要把保护的缓冲区标志为无效<span
lang=EN-US>,</span>然后取消<span lang=EN-US> ramdisk </span>的注册；<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:155.9pt;text-align:left;
text-indent:-125.85pt;mso-layout-grid-align:none;text-autospace:none'><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-left:5.95pt;text-align:left;
text-indent:23.8pt;mso-layout-grid-align:none;text-autospace:none'><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'>RAM</span><span style='font-size:10.5pt;mso-bidi-font-size:
10.0pt;mso-font-kerning:0pt;font-weight:normal'>盘中还有三个函数比较重要：<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:5.95pt;text-align:left;
text-indent:23.8pt;mso-layout-grid-align:none;text-autospace:none'><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>（<span
lang=EN-US>1</span>）<span lang=EN-US>int<span style='mso-spacerun:yes'>&nbsp;
</span>identify_ramdisk_image(kdev_t device, struct file *fp, int start_block)</span>；<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>检测设备中被<span
class=GramE>映象</span>文件的文件系统的类型，返回被<span class=GramE>映象</span>的最大块数。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>（<span
lang=EN-US>2</span>）<span lang=EN-US>static void rd_load_image(kdev_t
device,int offset)<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>把文件<span
class=GramE>映象</span>到<span lang=EN-US>RAM</span>盘，从偏移地址<span lang=EN-US>offset</span>开始。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
mso-layout-grid-align:none;text-autospace:none'><span style='font-size:10.5pt;
mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;font-weight:normal'>（<span
lang=EN-US>3</span>）<span lang=EN-US>void rd_load ( )<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
text-indent:23.5pt;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:0pt;
font-weight:normal'>用软盘启动的时候装载<span class=GramE>映象</span>文件到<span lang=EN-US>ROOT_DEV</span>中。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='margin-left:29.75pt;text-align:left;
text-indent:23.5pt;mso-layout-grid-align:none;text-autospace:none'><span
lang=EN-US style='font-size:10.5pt;mso-bidi-font-size:10.0pt;mso-font-kerning:
0pt;font-weight:normal'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:10.5pt;mso-bidi-font-size:10.0pt;
mso-font-kerning:0pt;font-weight:normal'>至此，我们对于<span lang=EN-US> Linux </span>中关于<span
lang=EN-US> RAM<span style='mso-spacerun:yes'>&nbsp; </span></span>的实现有一个大体的了解，下面我们再看一个较复杂的驱动程序――硬盘的驱动程序。</span></p>

</div>

</body>

</html>
