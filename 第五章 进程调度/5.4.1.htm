<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="5.4.1.files/filelist.xml">
<link rel=Edit-Time-Data href="5.4.1.files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>硬件支持</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>CLJ</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>CLJ</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>0</o:TotalTime>
  <o:Created>2007-08-15T03:24:00Z</o:Created>
  <o:LastSaved>2007-08-15T03:24:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>496</o:Words>
  <o:Characters>2828</o:Characters>
  <o:Lines>23</o:Lines>
  <o:Paragraphs>6</o:Paragraphs>
  <o:CharactersWithSpaces>3318</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:PunctuationKerning/>
  <w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:SimSun;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:宋体;
	mso-font-kerning:1.0pt;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:宋体;
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-font-kerning:1.0pt;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
 /* Page Definitions */
 @page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:42.55pt;
	mso-footer-margin:49.6pt;
	mso-paper-source:0;
	layout-grid:15.6pt;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:普通表格;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=ZH-CN style='tab-interval:21.0pt;text-justify-trim:punctuation'>

<div class=Section1 style='layout-grid:15.6pt'>

<p class=MsoNormal align=left style='margin-left:5.4pt;text-align:left;
mso-outline-level:1;mso-layout-grid-align:none;text-autospace:none'><b
style='mso-bidi-font-weight:normal'><span lang=EN-US>5</span></b><b
style='mso-bidi-font-weight:normal'><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>．</span><span
lang=EN-US>4</span></b><b style='mso-bidi-font-weight:normal'><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>．</span><span lang=EN-US>1 </span></b><b style='mso-bidi-font-weight:
normal'><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>硬件支持</span><span lang=EN-US><o:p></o:p></span></b></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span>Intel i386 </span>体系结构包括了一个特殊的段类型，叫<b
style='mso-bidi-font-weight:normal'>任务状态段（<span lang=EN-US>TSS</span>）</b><span
style='color:windowtext'>，如图<span lang=EN-US>5.4</span>所示。每个任务包含有它自己最小长度为<span
lang=EN-US>104</span>字节的<span lang=EN-US>TSS</span></span>段，在<span lang=EN-US>/include/
i386/processor.h </span>中定义为<span lang=EN-US>tss_struct</span>结构：</p>

<p class=MsoPlainText><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoPlainText><span class=GramE><span lang=EN-US>struct</span></span><span
lang=EN-US> tss_struct {</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>back_link,__blh;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>esp0;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>unsigned short<span style='mso-spacerun:yes'>&nbsp; </span>ss0,__ss0h;</span>／<span
lang=EN-US>*0</span>级堆栈指针，即<span lang=EN-US>Linux</span>中的<span class=GramE>内核级</span><span
lang=EN-US> *</span>／</p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>esp1;<span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>unsigned short<span style='mso-spacerun:yes'>&nbsp; </span>ss1,__ss1h; </span>／<span
lang=EN-US>* 1</span>级堆栈指针，未用<span lang=EN-US>*</span>／</p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>esp2;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>unsigned short<span style='mso-spacerun:yes'>&nbsp; </span>ss2,__ss2h; </span>／<span
lang=EN-US>* 2</span>级堆栈指针，未用<span lang=EN-US>*</span>／</p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>__cr3;<span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>eip;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>eflags;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>eax,ecx,edx,ebx;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>esp;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>ebp;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>esi;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>edi;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>es, __esh;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>cs, __csh;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>ss, __ssh;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>ds, __dsh;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>fs, __fsh;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>gs, __gsh;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>ldt, __ldth;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> short<span style='mso-spacerun:yes'>&nbsp;
</span>trace, bitmap;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>io_bitmap[IO_BITMAP_SIZE+1];</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>/*</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>* <span
class=GramE>pads</span> the TSS to be cacheline-aligned (size is 0x100)</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>*/</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long __cacheline_filler[5];</span></p>

<p class=MsoPlainText><span lang=EN-US>};</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span></span>每个<span lang=EN-US>TSS</span>有它自己<span
lang=EN-US> 8</span>字节的任务段描述符（<span lang=EN-US>Task State Segment Descriptor </span>，简称<span
lang=EN-US style='color:windowtext'>TSSD</span><span style='color:windowtext'>）。这个描述符包括指向<span
lang=EN-US>TSS</span>起始地址的<span lang=EN-US>32</span>位基地址域，<span lang=EN-US>20</span>位界限域，界限域值不能小于</span>十进制<span
lang=EN-US>104</span>（由<span lang=EN-US>TSS</span>段的最小长度决定）。<span lang=EN-US>TSS</span>描述符存放在<span
lang=EN-US>GDT</span>中，它是<span lang=EN-US>GDT</span>中的一个表项。</p>

<p class=MsoPlainText><span lang=EN-US><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=MsoPlainText><!--[if gte vml 1]><o:wrapblock><v:shapetype id="_x0000_t75"
  coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe"
  filled="f" stroked="f">
  <v:stroke joinstyle="miter"/>
  <v:formulas>
   <v:f eqn="if lineDrawn pixelLineWidth 0"/>
   <v:f eqn="sum @0 1 0"/>
   <v:f eqn="sum 0 0 @1"/>
   <v:f eqn="prod @2 1 2"/>
   <v:f eqn="prod @3 21600 pixelWidth"/>
   <v:f eqn="prod @3 21600 pixelHeight"/>
   <v:f eqn="sum @0 0 1"/>
   <v:f eqn="prod @6 1 2"/>
   <v:f eqn="prod @7 21600 pixelWidth"/>
   <v:f eqn="sum @8 21600 0"/>
   <v:f eqn="prod @7 21600 pixelHeight"/>
   <v:f eqn="sum @10 21600 0"/>
  </v:formulas>
  <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
  <o:lock v:ext="edit" aspectratio="t"/>
 </v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:10.25pt;margin-top:0;width:408.2pt;
  height:444.1pt;z-index:1' o:allowincell="f">
  <v:imagedata src="5.4.1.files/image001.wmz" o:title="'b5"/>
  <w:wrap type="topAndBottom"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0>
  <tr>
   <td width=14 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=544 height=592 src="5.4.1.files/image002.gif" v:shapes="_x0000_s1026"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<span lang=EN-US><span style='mso-spacerun:yes'>&nbsp;</span><span
style='mso-tab-count:1'>&nbsp;&nbsp; </span></span></p>

<p class=MsoPlainText style='mso-outline-level:1'><span lang=EN-US><span
style='mso-tab-count:3'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='mso-font-kerning:0pt'>图<span lang=EN-US>5.4 Intel i386</span>任务状态段及<span
lang=EN-US>TR</span>寄存器</span></p>

<p class=MsoPlainText style='text-indent:36.0pt'>后面将会看到，<span lang=EN-US>Linux</span>在进程切换时，只用到<span
lang=EN-US>TSS</span>中少量的信息，因此<span lang=EN-US>Linux</span>内核定义了另外一个数据结构，这就是<span
lang=EN-US>thread_struct </span>结构：</p>

<p class=MsoPlainText><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoPlainText><span class=GramE><span lang=EN-US>struct</span></span><span
lang=EN-US> thread_struct {</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>esp0;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>eip;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>esp;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>fs;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>gs;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span>/* Hardware debugging registers */</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> long<span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span>debugreg[8];<span
style='mso-spacerun:yes'>&nbsp; </span>/* %%db0-7 debug registers */</span></p>

<p class=MsoPlainText style='mso-outline-level:1'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>/* fault info */</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> long<span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span>cr2, trap_no, error_code;</span></p>

<p class=MsoPlainText style='mso-outline-level:1'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span>/* floating point info */</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>union</span> i387_union<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>i387;</span></p>

<p class=MsoPlainText style='mso-outline-level:1'><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp; </span>/* virtual 86 mode info */</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>struct</span> vm86_struct<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>* vm86_info;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>unsigned</span> long<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>screen_bitmap;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>v86flags, v86mask, v86mode, saved_esp0;</span></p>

<p class=MsoPlainText><span lang=EN-US>/* IO permissions */</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class=GramE>int</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>ioperm;</span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
class=GramE>unsigned</span> long<span style='mso-spacerun:yes'>&nbsp;&nbsp;
</span>io_bitmap[IO_BITMAP_SIZE+1];</span></p>

<p class=MsoPlainText><span lang=EN-US>};</span></p>

<p class=MsoPlainText><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;</span><span
style='mso-spacerun:yes'>&nbsp;&nbsp; </span></span>用这个数据结构来保存<span lang=EN-US>cr2</span>寄存器、浮点寄存器、调试寄存器及指定给<span
lang=EN-US>Intel 80x86</span>处理器的其他各种各样的信息。需要位图是因为<span lang=EN-US>ioperm(<span
style='mso-spacerun:yes'>&nbsp; </span>) </span>及<span lang=EN-US> iopl(<span
style='mso-spacerun:yes'>&nbsp; </span>)</span>系统调用可以允许用户态的进程直接访问特殊的<span
lang=EN-US>I/O</span>端口。尤其是，如果把<span lang=EN-US>eflag</span>寄存器中的<span
lang=EN-US>IOPL </span><span class=GramE>域设置</span>为<span lang=EN-US>3</span>，就允许用户态的进程访问对应的<span
lang=EN-US>I/O</span>访问<span class=GramE>权位图位为</span><span lang=EN-US>0</span>的任何一个<span
lang=EN-US>I/O</span>端口。</p>

<p class=MsoPlainText><span lang=EN-US><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>那么，进程到底是怎样进行切换的？</p>

<p class=MsoNormal align=left style='margin-left:5.4pt;text-align:left;
text-indent:21.0pt;mso-layout-grid-align:none;text-autospace:none'><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>从第三章我们知道，在中断描述符表（</span><span lang=EN-US>IDT</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>）中，除中断门、陷阱门和调用门外，还有一种“任务们”。任务门中包含有</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>段的选择符。当</span><span lang=EN-US>CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>因中断而穿过一个任务门时，就会将任务门中的<span class=GramE>段选择符</span>自动装入</span><span
lang=EN-US>TR</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>寄存器，使</span><span lang=EN-US>TR</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>指向新的</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，并完成任务切换。</span><span lang=EN-US>CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>还可以通过</span><span lang=EN-US>JMP</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>或</span><span lang=EN-US>CALL</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>指令实现任务切换，当跳转或调用的目标段（代码段）实际上指向</span><span
lang=EN-US>GDT</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>表中的一个</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>描述符项时，就会引起一次任务切换。</span></p>

<p class=MsoNormal align=left style='margin-left:5.4pt;text-align:left;
text-indent:21.0pt;mso-layout-grid-align:none;text-autospace:none'><span
lang=EN-US>Intel</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的这种设计确实很周到，也为任务切换提供了一个非常简洁的机制。但是，由于</span><span
lang=EN-US>i386</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的系统结构基本上是</span><span lang=EN-US>CISC</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的，通过</span><span lang=EN-US>JMP</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>指令或</span><span lang=EN-US>CALL</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（或中断）完成任务的过程实际上是“复杂指令”的执行过程，其执行过程长达</span><span lang=EN-US>300</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>多个</span><span lang=EN-US>CPU</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>周期（一个</span><span
lang=EN-US>POP</span><span class=GramE><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>指令占</span></span><span
lang=EN-US>12</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>个</span><span lang=EN-US>CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>周期），因此，</span><span lang=EN-US>Linux</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>内核并不完全使用</span><span lang=EN-US>i386CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>提供的任务切换机制。</span></p>

<p class=MsoNormal align=left style='margin-left:5.4pt;text-align:left;
text-indent:21.0pt;mso-layout-grid-align:none;text-autospace:none'><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>由于</span><span lang=EN-US>i386CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>要求软件设置</span><span lang=EN-US>TR</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>及</span><span lang=EN-US>TSS</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>，</span><span
lang=EN-US>Linux</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>内核只不过“走过场”地设置</span><span lang=EN-US>TR</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>及</span><span lang=EN-US>TSS</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>，以满足</span><span
lang=EN-US>CPU</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的要求。但是，内核并不使用任务门，也不使用</span><span
lang=EN-US>JMP</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>或</span><span lang=EN-US>CALL</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>指令实施任务切换。内核只是在初始化阶段设置</span><span lang=EN-US>TR</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，使之指向一个</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，从此以后再不改变</span><span lang=EN-US>TR</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的内容了。也就是说，每个</span><span lang=EN-US>CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>（如果有多个</span><span lang=EN-US>CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>）在初始化以后的全部运行过程中永远使用那个初始的</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>。同时，内核也不完全依靠</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>保存每个进程切换时的寄存器副本，而是将这些寄存器副本保存在各个进程自己的内核<span class=GramE>栈</span>中（参见上一章</span><span
lang=EN-US>task_struct</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>结构的存放）。</span></p>

<p class=MsoNormal align=left style='margin-left:5.4pt;text-align:left;
text-indent:21.0pt;mso-layout-grid-align:none;text-autospace:none'><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>这样以来，</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中的绝大部分内容就失去了原来的意义。那么，当进行任务切换时，怎样自动更换堆栈？我们知道，新任务的内核栈指针（</span><span
lang=EN-US>SS0</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>和</span><span lang=EN-US>ESP0</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>）应当取自当前任务的</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，可是，</span><span lang=EN-US>Linux</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中并不是每个任务就有一个</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>，而是每个</span><span lang=EN-US>CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>只有一个</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>。</span><span lang=EN-US>Intel</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>原来的意图是让</span><span
lang=EN-US>TR</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>的内容（即</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>）随着任务的切换而走马灯似地换，而在</span><span lang=EN-US>Linux</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>内核中却成了只更换</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中的</span><span lang=EN-US>SS0</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>和</span><span
lang=EN-US>ESP0</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>，而不更换</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>本身，也就是根本不更换</span><span lang=EN-US>TR</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>的内容。这是因为，改变</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>中</span><span lang=EN-US>SS0</span><span style='font-family:
宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman"'>和</span><span
lang=EN-US>ESP0</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>所化的开销比通过装入</span><span lang=EN-US>TR</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>以更换一个</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>要小得多。因此，在</span><span lang=EN-US>Linux</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>内核中，</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>并不是属于某个进程的资源，而是全局性的公共资源。在多处理机的情况下，尽管内核中确实有多个</span><span
lang=EN-US>TSS</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>，但是每个</span><span lang=EN-US>CPU</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>仍旧只有一个</span><span lang=EN-US>TSS</span><span
style='font-family:宋体;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman"'>。</span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
