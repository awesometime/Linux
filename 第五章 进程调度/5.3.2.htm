<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="5.3.2.files/filelist.xml">
<title>Linux进程调度时机</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="chsdate" downloadurl=""/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>CLJ</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>CLJ</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2007-08-15T03:20:00Z</o:Created>
  <o:LastSaved>2007-08-15T03:20:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>333</o:Words>
  <o:Characters>1900</o:Characters>
  <o:Lines>15</o:Lines>
  <o:Paragraphs>4</o:Paragraphs>
  <o:CharactersWithSpaces>2229</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:PunctuationKerning/>
  <w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:SimSun;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:宋体;
	mso-font-kerning:1.0pt;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
 /* Page Definitions */
 @page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:42.55pt;
	mso-footer-margin:49.6pt;
	mso-paper-source:0;
	layout-grid:15.6pt;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:普通表格;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]-->
</head>

<body lang=ZH-CN style='tab-interval:21.0pt;text-justify-trim:punctuation'>

<div class=Section1 style='layout-grid:15.6pt'>

<p class=MsoNormal align=left style='text-align:left;mso-outline-level:1;
mso-layout-grid-align:none;text-autospace:none'><st1:chsdate Year="1899"
Month="12" Day="30" IsLunarDate="False" IsROCDate="False" w:st="on"><b
 style='mso-bidi-font-weight:normal'><span lang=EN-US style='font-family:宋体;
 mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>5.3.2</span></b></st1:chsdate><b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>
Linux</span></b><b style='mso-bidi-font-weight:normal'><span style='font-family:
宋体;mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>进程调度时机<span
lang=EN-US><o:p></o:p></span></span></b></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>调度程序虽然特别重要，但它不过是一个存在于内核空间中的函数而已，并不神秘。<span
lang=EN-US>Linux</span>的调度程序是一个叫<span lang=EN-US>Schedule</span>（）的函数，这个函数被调用的频率很高，由它来决定是否要进行进程的切换，如果要切换的话，切换到哪个进程等等。我们先来看在什么情况下要执行调度程序，我们把这种情况叫做调度时机。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>Linux</span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>调度时机主要有：<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>1</span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>、进程状态转换的时刻：进程终止、进程睡眠；<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>2</span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>、当前进程的时间片用完时（<span
lang=EN-US>current-&gt;counter=0</span>）；<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>3</span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>、设备驱动程序<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>4</span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>、进程从中断、异常及系统调用返回到用户态时；<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>时机<span
lang=EN-US>1</span>，进程要调用<span lang=EN-US>sleep</span>（）或<span lang=EN-US>exit</span>（）等函数进行状态转换，这些函数会主动调用调度程序进行进程调度；<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>时机<span
lang=EN-US>2</span>，由于进程的时间片是由时钟中断来更新的，因此，这种情况和时机<span lang=EN-US>4</span>是一样的。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>时机<span
lang=EN-US>3</span>，当设备驱动程序执行长而重复的任务时，直接调用调度程序。在每次反复循环中，驱动程序都检查</span><span
lang=EN-US>need_resched</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>的值，如果必要，则调用调度程序</span><span
lang=EN-US>schedule()</span><span style='font-family:宋体;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman"'>主动放弃</span><span
lang=EN-US>CPU</span><span style='font-family:宋体;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman"'>。</span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>时机<span
lang=EN-US>4</span>，如前所述，不管是从中断、异常还是系统调用返回，最终都调用<span lang=EN-US>ret_from_sys_call</span>（），由这个函数进行调度标志的检测，如果必要，则<span
class=GramE>调用调用</span>调度程序。那么，为什么从系统调用返回时要调用调度程序呢？这当然是从效率考虑。从系统调用返回意味着要离开内核态而返回到用户态，而状态的转换要花费一定的时间，因此，在返回到用户态前，系统把在内核态该处理的事全部做完。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>对于直接执行调度程序的时机，我们不讨论，因为后面我们将会描述调度程序的工作过程。前面我们讨论了时钟中断，知道了时钟中断的重要作用，下面我们就简单看一下每个时钟中断发生时内核要做的工作，首先对这个最频繁的调度时机有一个大体了解，然后再详细讨论调度程序的具体工作过程。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>每个时钟中断（<span
lang=EN-US>timer interrupt</span>）发生时，由三个函数协同工作，共同完成进程的选择和切换，它们是：<span
lang=EN-US>schedule</span>（）、<span lang=EN-US>do_timer</span>（）及<span
lang=EN-US>ret_form_sys_call</span>（）。我们先来解释一下这三个函数：<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>schedule</span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>（）：进程调度函数，由它来完成进程的选择（调度）；<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>do_timer</span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>（）：暂且称之为时钟函数，该函数在时钟中断服务程序中被调用，是时钟中断服务程序的主要组成部分，该函数被调用的频率就是时钟中断的频率即每秒钟<span
lang=EN-US>100</span>次（简称<span lang=EN-US>100</span>赫兹或<span lang=EN-US>100Hz</span>）；<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>ret_from_sys_call</span><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>（）：系统调用返回函数。当一个系统调用或中断完成时，该函数被调用，用于处理一些收尾工作，例如信号处理、核心任务等等。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>这三个函数是如何协调工作的呢？<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>前面我们看到，时钟中断是一个中断服务程序，它的主要组成部分就是时钟函数<span
lang=EN-US>do_timer</span>（），由这个函数完成系统时间的更新、进程时间片的更新等工作，更新后的进程时间片<span
lang=EN-US>counter</span>作为调度的主要依据。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>在时钟中断返回时，要调用函数<span
lang=EN-US>ret_from_sys_call</span>（），前面我们已经讨论过这个函数，在这个函数中有如下几行：<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
lang=EN-US style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>cmpl</span></span><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'> $0, _need_resched<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span class=GramE><span
lang=EN-US style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>jne</span></span><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'> reschedule<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN-US style='mso-ascii-font-family:宋体;color:black;mso-font-kerning:0pt'>……</span><span
lang=EN-US style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>restore_all:<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-outline-level:1;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'><span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>RESTORE_ALL<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'><span
style='mso-spacerun:yes'>&nbsp; </span><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span class=GramE><span lang=EN-US style='font-family:
宋体;mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>reschedule</span></span><span
lang=EN-US style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>:<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=GramE>call</span>
SYMBOL_NAME(schedule)<span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'><span
style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=GramE>jmp</span>
ret_from_sys_call<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>这几行的意思很明显：检测<span
lang=EN-US> need_resched </span>标志，如果此标志为非<span lang=EN-US>0</span>，那么就转到<span
lang=EN-US>reschedule</span>处调用调度程序<span lang=EN-US>schedule</span>（）进行进程的选择。调度程序<span
lang=EN-US>schedule</span>（）会根据具体的标准在运行队列中选择下一个应该运行的进程。当从调度程序返回时，如果发现又有调度标志被设置，则又调用调度程序，直到调度标志为<span
lang=EN-US>0</span>，这时，从调度程序返回时由<span lang=EN-US>RESTORE_ALL</span>恢复被选定进程的环境，返回到被选定进程的用户空间，使之得到运行。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>以上就是时钟中断这个最频繁的调度时机。讨论这个的主要目的使读者对时机<span
lang=EN-US>4</span>有个大致的了解。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>最后要说明的是，系统调用返回函数<span
lang=EN-US>ret_from_sys_call</span>（）是从系统调用、异常及中断返回函数通常要调用的函数，但并不是非得调用，对于那些要经常被响应的和<span
class=GramE>要被尽快</span>处理的中断请求信号，为了减少系统开销，处理完成后并不调用<span lang=EN-US>
ret_from_sys_call</span>（）（因为很显然的，从这些中断处理程序返回到的用户空间肯定是那个被中断的进程，无需重新选择），并且，它们作的工作要尽可能少，因为响应的频率太高了。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>Linux </span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>调度程序和其他的<span lang=EN-US>UNIX</span>调度程序不同，尤其是在“<span
lang=EN-US>nice level</span></span><span lang=EN-US style='mso-ascii-font-family:
宋体;color:black;mso-font-kerning:0pt'>”</span><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>优先级的处理上，与优先权调度（<span
lang=EN-US>priority</span>高的进程最先运行）不同，<span lang=EN-US>Linux</span>用的是时间片轮转调度（<span
lang=EN-US>Round Robing</span>），但同时又保证了高优先级的进程运行的既快、时间又长（<span lang=EN-US>both
sooner and longer</span>）。而标准的<span lang=EN-US>UNIX</span>调度程序都用到了多级进程队列。大多数的实现都用到了二级优先队列：一个标准队列和一个实时（“<span
lang=EN-US>real time</span></span><span lang=EN-US style='mso-ascii-font-family:
宋体;color:black;mso-font-kerning:0pt'>”</span><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>）队列。一般情况下，如果实时队列中的进程未被阻塞，它们都要在标准队列中的进程之前被执行，并且，每个队列中，“<span
lang=EN-US>nice level</span></span><span lang=EN-US style='mso-ascii-font-family:
宋体;color:black;mso-font-kerning:0pt'>”</span><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>高的进程先被执行。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>总体上，<span
lang=EN-US>Linux </span><span class=GramE>调度序程在</span>交互性方面表现很出色，当然了，这是以牺牲一部分“吞吐量”为代价的。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
