<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="5.3.1.files/filelist.xml">
<title>基本原理</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="chsdate" downloadurl=""/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>CLJ</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>CLJ</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>0</o:TotalTime>
  <o:Created>2007-08-15T03:19:00Z</o:Created>
  <o:LastSaved>2007-08-15T03:19:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>274</o:Words>
  <o:Characters>1565</o:Characters>
  <o:Lines>13</o:Lines>
  <o:Paragraphs>3</o:Paragraphs>
  <o:CharactersWithSpaces>1836</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:PunctuationKerning/>
  <w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:SimSun;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:宋体;
	mso-font-kerning:1.0pt;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
 /* Page Definitions */
 @page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:42.55pt;
	mso-footer-margin:49.6pt;
	mso-paper-source:0;
	layout-grid:15.6pt;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:普通表格;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]-->
</head>

<body lang=ZH-CN style='tab-interval:21.0pt;text-justify-trim:punctuation'>

<div class=Section1 style='layout-grid:15.6pt'>

<p class=MsoNormal align=left style='text-align:left;mso-outline-level:1;
mso-layout-grid-align:none;text-autospace:none'><st1:chsdate Year="1899"
Month="12" Day="30" IsLunarDate="False" IsROCDate="False" w:st="on"><b
 style='mso-bidi-font-weight:normal'><span lang=EN-US style='font-family:宋体;
 mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>5.3.1</span></b></st1:chsdate><span
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>基本原理<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>从前面我们可以看到，进程运行需要各种各样的系统资源，如内存、文件、打印机和最宝贵的<span
lang=EN-US>CPU</span>等等，所以说呢，调度的实质就是资源的分配。系统通过不同的调度算法（<span lang=EN-US>Scheduling
Algorithm</span>）来实现这种资源的分配。通常来说，选择什么样的调度算法取决于的资源分配的策略（<span lang=EN-US>Scheduling
Policy</span>），我们不准备在这里详细说明各种调度算法，只说明与<span lang=EN-US>Linux</span>调度相关的几种算法及这些算法的原理。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>一个好的调度算法应当考虑以下几个方面：<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>（<span
lang=EN-US>1</span>）公平：保证每个进程得到合理的<span lang=EN-US>CPU</span>时间。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>（<span
lang=EN-US>2</span>）高效：使<span lang=EN-US>CPU</span>保持忙碌状态，<span class=GramE>即总是</span>有进程在<span
lang=EN-US>CPU</span>上运行。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>（<span
lang=EN-US>3</span>）响应时间：使交互用户的响应时间尽可能短。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>（<span
lang=EN-US>4</span>）周转时间：使批处理用户等待输出的时间尽可能短。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>（<span
lang=EN-US>5</span>）吞吐量：使单位时间内处理的进程数量尽可能多。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>很显然，这<span
lang=EN-US>5</span>个目标不可能同时达到，所以，不同的操作系统会在这几个方面中<span class=GramE>作出</span>相应的取舍，从而确定自己的调度算法，例如<span
lang=EN-US>UNIX</span>采用动态优先数调度、<span lang=EN-US>5.3BSD</span>采用多级反馈队列调度、<span
lang=EN-US>Windows</span>采用抢先多任务调度等等。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>下面来了解一下主要的调度算法及其基本原理：<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-outline-level:1;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>1</span></b><b style='mso-bidi-font-weight:
normal'><span style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>．时间片轮转调度算法<span lang=EN-US><o:p></o:p></span></span></b></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>时间片（<span
lang=EN-US>Time Slice</span>）就是分配给进程运行的一段时间。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>在分时系统中，为了保证人机交互的及时性，系统使每个进程依次地按时间片轮流的方式执行，此时即应采用时间片轮转法进行调度。在通常的轮转法中，系统将所有的可运行（即就绪）进程按先来先服务的原则，排成一个队列，每次调度时把<span
lang=EN-US>CPU</span>分配给队首进程，并令其执行一个时间片。时间片的大小从几<span lang=EN-US>ms</span>到几百<span
lang=EN-US>ms</span>不等。当执行的时间片用完时，系统发出信号，通知调度程序，调度程序便据此信号<span class=GramE>来停止</span>该进程的执行，并将它送到运行队列的末尾，等待下一次执行；然后，把处理机分配给就绪队列中新的队首进程，同时也让它执行一个时间片。这样就可以保证运行队列中的所有进程，在一个给定的时间（人所能接受的等待时间）内，均能获得一时间片的处理机执行时间。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-outline-level:1;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>2</span></b><b style='mso-bidi-font-weight:
normal'><span style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>．优先权调度算法<span lang=EN-US><o:p></o:p></span></span></b></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>为了照顾到紧迫<span
class=GramE>型进程</span>在进入系统后便能获得优先处理，引入了最高优先权调度算法。当将该算法用于进程调度时，系统将把处理机分配给运行队列中优先权最高的进程，这时，又可进一步把该算法分成两种方式：<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>(1) </span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>非抢占式优先权算法（又称不可剥夺调度：<span
lang=EN-US>Nonpreemptive Scheduling</span>）<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>在这种方式下，系统一旦将处理机（<span
lang=EN-US>CPU</span>）分配给运行队列中优先权最高的进程后，该进程便一直执行下去，直至完成；或因发生某事件使该进程放弃处理机时，系统方可将处理机分配给另一个优先权高的进程。这种调度算法主要用于批处理系统中，也可用于某些对实时性要求不严的实时系统中。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>(2) </span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>抢占式优先权调度算法（又称可剥夺调度：<span
lang=EN-US>Preemptive Scheduling</span>）<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>该算法的本质就是系统中当前运行的进程<b
style='mso-bidi-font-weight:normal'>永远</b>是可运行进程中优先权最高的那个。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>在这种方式下，系统同样是把处理机分配给优先权最高的进程，使之执行。但是只要一出现了另一个优先权更高的进程时，调度程序就暂停原最高优先权进程的执行，而将处理机分配给新出现的优先权最高的进程，即剥夺当前进程的运行。因此，在采用这种调度算法时，每当出现一新的可运行进程，就将它和当前运行进程进行优先权比较，如果高于当前进程，将触发进程调度。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>这种方式的优先权调度算法，能更好的满足紧迫进程的要求，故而常用于要求比较严格的实时系统中，以及对性能要求较高的批处理和分时系统中。<span
lang=EN-US>Linux</span>也采用这种调度算法。<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-outline-level:1;
mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:
normal'><span lang=EN-US style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>3</span></b><b style='mso-bidi-font-weight:
normal'><span style='font-family:宋体;mso-hansi-font-family:"Times New Roman";
color:black;mso-font-kerning:0pt'>．多级反馈队列调度<span lang=EN-US><o:p></o:p></span></span></b></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>这是时下最时髦的一种调度算法。其本质是：综合了时间片轮转调度和抢占式优先权调度的优点，即：优先权高的进程先运行给定的时间片，相同优先权的进程轮流运行给定的时间片。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-outline-level:1;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-US
style='font-family:宋体;mso-hansi-font-family:"Times New Roman";color:black;
mso-font-kerning:0pt'>4</span><span style='font-family:宋体;mso-hansi-font-family:
"Times New Roman";color:black;mso-font-kerning:0pt'>．<b style='mso-bidi-font-weight:
normal'>实时调度<span lang=EN-US><o:p></o:p></span></b></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>最后我们来看一下实时系统中的调度。什么叫实时系统，就是系统对外部事件有求必应、尽快响应。在实时系统中存在有若干个<span
class=GramE>实时进程</span>或任务，它们用来反应或控制某个（些）外部事件，往往带有某种程度的紧迫性，因而对实时系统中的进程调度有某些特殊要求。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>在实时系统中，广泛采用抢占调度方式，特别是对于那些要求严格的实时系统。因为这种调度方式既具有较大的灵活性，又能获得很小的调度延迟；但是这种调度方式也比较复杂。<span
lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:24.0pt;
mso-layout-grid-align:none;text-autospace:none'><span style='font-family:宋体;
mso-hansi-font-family:"Times New Roman";color:black;mso-font-kerning:0pt'>我们大致了解以上的调度方式以后，下面具体来看<span
lang=EN-US>Linux</span>中的调度程序，这里要说明的是，<span lang=EN-US>Linux</span>的调度程序并不复杂，但这并不影响<span
lang=EN-US>Linux</span>调度程序的高效性！<span lang=EN-US><o:p></o:p></span></span></p>

<p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
